;;; init.el --- Emacs initialization file -*- lexical-binding: t -*-

;; Copyright (C) 2022 Thomas Freeman

;; Author: Thomas Freeman
;; Maintainer: Thomas Freeman
;; Keywords: lisp
;; Version: 0.0.1
;; Created: 09 Jan 2022

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is an init file for Emacs.
;;
;; This file is NOT a part of Emacs.
;;
;; This file IS NOT intended to be edited! It was generated by init.org.

;;; URL: https://github.com/tfree87/.emacs.d

;; For documentation and for editing this file, see the init.org in the
;; github repository tfree87/.emacs.d
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Code:

(let ((file-name-handler-alist nil))

;; Add modules to Emacs load path

(let ((default-directory "~/.emacs.d/modules/"))
  (normal-top-level-add-subdirs-to-load-path))

(defun freemacs/isportable-p ()
  "A function to check whether Emacs was executed as a portable application in Windows by the runemacs.bat script."
  (string= (getenv "EMACS_PORTABLE") "Y"))

(when (freemacs/isportable-p)
  (add-to-list 'exec-path "~/PortableApps/GitPortable/App/Git/bin"))

;; Set the location of variables set using Emacs customize interface

(setq custom-file "~/.emacs.d/custom.el")

;; Load the file custom.el file containing variables from Emacs customize

(load custom-file)

;; Install Straight.el to manage packages

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Set up use-package to manage package loading

(straight-use-package 'use-package)

;; Load benchmark-init module

(require 'freemacs-benchmark-init)

;; Load No-littering module

(require 'freemacs-no-littering)

;; Load Whicher module

(require 'freemacs-whicher)

;; Load Defaults module

(require 'freemacs-defaults)

;; Load the project module

(require 'freemacs-project)

;; Load the coding module
(require 'freemacs-coding)

;; Load the AutoHotKey module
(require 'freemacs-autohotkey)

;; Load the completion module

(require 'freemacs-completion)

;; Load the Docker module

(require 'freemacs-docker)

;; Load the editing module

(require 'freemacs-editing)

;; Load Elfeed newsreader module

(require 'freemacs-elfeed)

;; Load email module

(require 'freemacs-email)

;; Load the EXWM module

;(require 'freemacs-exwm)

;; Load file tools module

(require 'freemacs-dired)

(require 'freemacs-trashed)

;; Load graphing module

(require 'freemacs-graphing)

;; Load the Ledger module

(require 'freemacs-ledger)

(require 'freemacs-meow)

;; Load the Org Mode module

(require 'freemacs-org)

(require 'freemacs-org-contacts)

;; Load session module

(require 'freemacs-session)

;; Load the Eshell module

(require 'freemacs-eshell)

;; Load PowerShell module

(require 'freemacs-powershell)

;; Load the VTerm module

(require 'freemacs-vterm)

;; Load theme module

(require 'freemacs-theme)

;; Load All the Icons module

(require 'freemacs-alltheicons)

;; Load Academic Writing module

(require 'freemacs-academic-writing)

;; Load Spellchecking module

(require 'freemacs-spellcheck)

;; Load the LaTeX module

(require 'freemacs-latex)

;; Load the markdown module

(require 'freemacs-markdown)

;; Load the ox-publish module

(require 'freemacs-ox-publish)

;; Load the pdf module

(require 'freemacs-pdf)

;; Load the help module

(require 'freemacs-help)

;; Load the YouTube module

(require 'freemacs-youtube)

;; Load server module

(require 'freemacs-server)

;; Custom Function Definitions

(whicher "sudo")
(defun sudo-find-file (file)
  "Open FILE as root."
  (interactive "FOpen file as root: ")
  (when (file-writable-p file)
    (user-error "File is user writeable, aborting sudo"))
  (find-file (if (file-remote-p file)
                 (concat "/" (file-remote-p file 'method) ":"
                         (file-remote-p file 'user) "@" (file-remote-p file 'host)
                         "|sudo:root@"
                         (file-remote-p file 'host) ":" (file-remote-p file 'localname))
               (concat "/sudo:root@localhost:" file))))

;; Sync Dropbox containing org agenda files on load and close

(when (freemacs/isportable-p)
  (setq rclone-path "~/rclone/rclone.conf")
  (rclone-run-remote-to-local "sync" "~/Dropbox" "dropbox:")
  (add-hook 'kill-emacs-hook (rclone-run-local-to-remote "sync"
                                                         "~/Dropbox"
                                                         "dropbox:")))

(setq gc-cons-threshold 800000)
)

(provide 'init)

;;; init.el ends here
