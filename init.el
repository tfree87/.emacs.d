;;; init.el --- Emacs initialization file -*- lexical-binding: t -*-

;; Copyright (C) 2022 Thomas Freeman

;; Author: Thomas Freeman
;; Maintainer: Thomas Freeman
;; Keywords: lisp
;; Version: 0.0.1
;; Created: 09 Jan 2022

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;; This file is an init file for Emacs.
;;
;; This file is NOT a part of Emacs.
;;
;; This file IS NOT intended to be edited! It was generated by init.org.

;;; URL: https://github.com/tfree87/.emacs.d

;; For documentation and for editing this file, see the init.org in the
;; github repository tfree87/.emacs.d
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Code:

(let ((file-name-handler-alist nil))

(let ((default-directory "~/.emacs.d/modules/"))
  (normal-top-level-add-subdirs-to-load-path))

(when (string= (getenv "EMACS_PORTABLE") "Y")
  (add-to-list 'exec-path "~/PortableApps/GitPortable/App/Git/bin"))

;; Set the location of variables set using Emacs customize interface

(setq custom-file "~/.emacs.d/custom.el")

;; Load the file custom.el file containing variables from Emacs customize

(load custom-file)

;; Install Straight.el to manage packages

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name
        "straight/repos/straight.el/bootstrap.el"
        user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Set up use-package to manage package loading

(straight-use-package 'use-package)

;; Startup Tools

(use-package no-littering
  :straight (no-littering :host github
                          :repo "emacscollective/no-littering"
                          :branch "master"))

(use-package whicher
  :straight (whicher :host github
                     :repo "tfree87/whicher"
                     :branch "master")
  :custom
  (whicher-report-new-buffer t))

(use-package emacs
  :custom
  (bidi-paragraph-direction 'left-to-right)
  ;;(desktop-save-mode t)
  (delete-by-moving-to-trash t)
  (version-control t)
  (delete-old-versions t)
  (vc-make-backup-files t)
  (inhibit-startup-screen t)
  (register-preview-delay 0)
  (ring-bell-function #'ignore)
  (visible-bell t)
  (sentence-end-double-space nil)
  :config
  (add-hook 'before-save-hook 'time-stamp)
  (if (version<= "27.1" emacs-version)
      (setq bidi-inhibit-bpa t))
  (display-battery-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (recentf-mode 1)
  (winner-mode t))

;; Load Elfeed newsreader module

(require 'freemacs-elfeed)

;; Load email module

(require 'freemacs-email)

;; Load the coding module

(require 'freemacs-coding)

;; Load the completion module

(require 'freemacs-completion)

;; Load file tools module

(require 'freemacs-dired)

;; Load sunrise module

(require 'freemacs-sunrise)

;; Navigation and Session Configuration

(use-package bufler
  :straight t
  :bind ("C-x C-b" . bufler))

(use-package burly
  :straight (burly :host github
                   :repo "tfree87/burly.el"
                   :branch "master")
  :commands (burly-bookmark-frames
             burly-bookmark-windows
             burly-open-bookmark))

(use-package winum
  :straight t
  :defer 3
  :config
  (winum-mode t))

;; Load the Org Mode module

(require 'freemacs-org)

;; Writing/Publishing/Reading Configuation

(use-package academic-phrases
  :straight t
  :defer t)

(use-package auctex
  :straight t
  :defer t
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-master nil)
  (bibtex-dialect 'biblatex))

(use-package citar
  :straight (citar :host github
                   :repo "emacs-citar/citar"
                   :branch "main")
  :after org
  :custom
  (citar-bibliography org-cite-global-bibliography))

(use-package ispell
  :straight (:type built-in)
  :defer t
  :config
  (if (eq system-type 'windows-nt)
    (progn (setq ispell-program-name (expand-file-name "~/.emacs.d/hunspell/bin/hunspell.exe"))
           (setq ispell-personal-dictionary "~/.emacs.d/hunspell_en_US")
           (setq ispell-local-dictionary "en_US")
           (setq ispell-local-dictionary-alist
                 '(("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8))))
      (setq ispell-program-name (whicher "hunspell"))))

(use-package flyspell
  :straight (:type built-in)
  :defer t
  :init
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'text-mode-hook 'flyspell-mode))

(use-package markdown-mode
  :straight t
  :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
  :init
  (whicher "pandoc")
  (setq markdown-command '("pandoc" "--from=markdown" "--to=html5"))
  :config
  (bind-key "A-b" (surround-text-with "+*") markdown-mode-map)
  (bind-key "s-b" (surround-text-with "**") markdown-mode-map)
  (bind-key "A-i" (surround-text-with "*") markdown-mode-map)
  (bind-key "s-i" (surround-text-with "*") markdown-mode-map)
  (bind-key "A-=" (surround-text-with "`") markdown-mode-map)
  (bind-key "s-=" (surround-text-with "`") markdown-mode-map))

(use-package pdf-tools
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-loader-install :no-query))

;; Shells and Terminals Configuration

(use-package eshell
  :straight (:type built-in)
  :defer t
  :hook
  (eshell-load . (lambda ()
                        (eshell-git-prompt-use-theme 'multiline2)))
  (eshell-mode . (lambda ()
                   (add-to-list 'eshell-visual-commands "htop")
                   (add-to-list 'eshell-visual-commands "ipython")
                   (add-to-list 'eshell-visual-commands "rclone")
                   (add-to-list 'eshell-visual-commands "ssh")
                   (add-to-list 'eshell-visual-commands "tail")
                   (add-to-list 'eshell-visual-commands "top")
                   (eshell/alias "ff" "find-file $1")
                   (eshell/alias "emacs" "find-file $1")
                   (eshell/alias "untar" "tar -zxvf")
                   (eshell/alias "cpv" "rsync -ah --info=progress2")
                   (eshell/alias "ll" "ls -Alh")))
  :custom
  (eshell-error-if-no-glob t)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t)
  (eshell-destroy-buffer-when-process-dies t)
  :config
  (setenv "PAGER" "cat"))

(use-package esh-autosuggest
  :straight t
  :hook (eshell-mode . esh-autosuggest-mode))

(use-package eshell-git-prompt
  :straight (emacs-git-prompt :host github
                              :repo "tfree87/eshell-git-prompt"
                              :branch "master")
  :defer t)

(use-package eshell-toggle
  :straight (eshell-toggle :repo "4DA/eshell-toggle"
                           :host github
                           :repo "master")
  :custom
  (eshell-toggle-size-fraction 3)
  (eshell-toggle-run-command nil)
  (eshell-toggle-init-function #'eshell-toggle-init-eshell)
  :bind
  ("M-s-`" . eshell-toggle))

(use-package oh-my-eshell
  :straight (oh-my-eshell :repo "tfree87/OhMyEshell"
                          :branch "main"
                          :host github)
  :after eshell)

(use-package powershell
  :straight t
  :if (eq system-type 'windows-nt)
  :defer t
  :init
  (whicher "powershell.exe")
  :config
  ;; Change default compile command for powershell
  (add-hook 'powershell-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format
                     "powershell.exe -NoLogo -NonInteractive -Command \"& '%s'\"")
                    (buffer-file-name)))))

(use-package vterm
  :defer t)

;; Load theme module

(require 'freemacs-theme)

(require 'freemacs-alltheicons)

;; Load the EXWM module

(require 'freemacs-exwm)

(use-package docker
  :straight t
  :init
  (whicher "docker")
  :bind ("C-c d" . docker))

(use-package docker-compose-mode
  :straight t
  :defer t
  :init
  (whicher "docker-compose"))

(use-package emms
  :straight t
  :defer t
  :custom
  (emms-source-file-default-directory "~/Music/")
  :config
  (require 'emms-setup)
  (emms-all)
  (emms-default-players)
  (global-set-key (kbd "<XF86AudioPrev>") 'emms-previous)
  (global-set-key (kbd "<XF86AudioNext>") 'emms-next)
  (global-set-key (kbd "<XF86AudioPlay>") 'emms-pause))

(use-package gnuplot
  :straight t
  :init
  (whicher "gnuplot")
  :defer t)

(use-package helpful
  :straight t
  :defer t
  :bind
  ("C-h f" . #'helpful-callable)
  ("C-h v" . #'helpful-variable)
  ("C-h k" . #'helpful-key)
  ("C-c C-d" . #'helpful-at-point)
  ("C-h F" . #'helpful-function)
  ("C-h C" . #'helpful-command))

(use-package ledger-mode
  :straight t
  :defer t
  :init
  (whicher "ledger"))

(use-package multiple-cursors
  :straight t
  :defer t
  :bind
  ("C-S-c C-S-c" . 'mc/edit-lines)
  ("C->" . 'mc/mark-next-like-this)
  ("C-<" . 'mc/mark-previous-like-this)
  ("C-c C-<" . 'mc/mark-all-like-this))

(use-package plantuml-mode
  :straight t
  :defer t
  :after org)

(use-package popper
  :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Embark Actions\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*Whicher Report\\*"
            help-mode
            compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))

(use-package savehist
  :straight (:type built-in)
  :init
  (savehist-mode))

(use-package which-key
  :straight t
  :defer 3
  :custom
  (which-key-show-early-on-C-h t)
  :config
  (global-set-key (kbd "<f4>") 'which-key-show-major-mode)
  (which-key-setup-side-window-right-bottom)
  (which-key-mode))

(use-package yasnippet
  :straight t
  :defer 3
  :config
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :straight t
  :defer t)

;; Start an Emacs server

(use-package server
  :straight (:type built-in)
  :config
  (when (not (string= (getenv "EMACS_PORTABLE") "Y"))
    (when (not (server-running-p))
      (server-start))))

;; Custom Function Definitions

(whicher "sudo")
(defun sudo-find-file (file)
    "Open FILE as root."
    (interactive "FOpen file as root: ")
    (when (file-writable-p file)
      (user-error "File is user writeable, aborting sudo"))
    (find-file (if (file-remote-p file)
                   (concat "/" (file-remote-p file 'method) ":"
                           (file-remote-p file 'user) "@" (file-remote-p file 'host)
                           "|sudo:root@"
                           (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                 (concat "/sudo:root@localhost:" file))))

;; Sync Dropbox containing org agenda files on load and close

(when (string= (getenv "EMACS_PORTABLE") "Y")
  (setq rclone-path "~/rclone/rclone.conf")
  (rclone-run-remote-to-local "sync" "~/Dropbox" "dropbox:")
  (add-hook 'kill-emacs-hook (rclone-run-local-to-remote "sync"
                                                         "~/Dropbox"
                                                         "dropbox:")))

(setq gc-cons-threshold 800000)
)

(provide 'init)

;;; init.el ends here
