# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t); -*-
#+title: Emacs Configuration
#+authgor: Thomas Freeman
#+date: Time-stamp: <2022-01-09 14:23:30 thomas>
#+description: This org-mode file contains an org-babel implementation of the .emacs or /.emacs.d/init.el file.
#+language: en
#+property: header-args :results silent :exports code
#+options: tex:t


* Performance Optimization Start
In order to slightly reduce the load time for Emacs, the whole ~init.el~ file can be wrapped in the following let statement to speed up the load process. This can help a little when Emacs is run as a portable app from a flash drive as I often do.
#+begin_src emacs-lisp :tangle yes
  (let ((file-name-handler-alist nil))
#+end_src
* Customized Variables
Keep all customized variables in a separate file.
#+begin_src emacs-lisp :tangle yes
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src
* Package Management
#+begin_src emacs-lisp :tangle yes
  ;; Fix TLS issue in old Emacs versions
  (if (>= 26.3 (string-to-number emacs-version))
      (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))
  
  (require 'package)
  (custom-set-variables '(package-archives
                          '(("melpa" . "https://melpa.org/packages/")
                            ("elpa" . "https://elpa.gnu.org/packages/")
                            ("org" . "http://orgmode.org/elpa/"))))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  
  ;; Check to see if use-package is installed
  (unless (package-installed-p
           'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  
  ;; use-package for managing emacs packages
  (eval-when-compile
    (require 'use-package))
#+end_src
* Track Load Time
  #+begin_src emacs-lisp :tangle yes
    (use-package benchmark-init
      :disabled t
      :ensure t
      :hook
      ;; To disable collection of benchmark data after init is done.
      (after-init . benchmark-init/deactivate))
  #+end_src
* General Configuration
This section contains modifications for Emacs that affect the behavior in nearly all buffers.
** Automatic Time Stamps When Saving
Emacs supports time stamps in any text buffer where ~Time-stamp: <>~ can be found in the first eight lines. The ~time-stamp~ command can then be used to automatically update the time. A simpler solution, however, is to have Emacs automatically update the time stamp when the buffer is saved.
#+begin_src emacs-lisp :tangle yes
  (add-hook 'before-save-hook 'time-stamp)
#+end_src
** Default to UTF-8
This will cause Emacs to defer to encoding text files as UTF-8 by default.
#+begin_src emacs-lisp :tangle yes
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
** File Deletion and Backup
Changing how Emacs deletes files and how it creates backups.
*** Send Deleted Files to System Trash
 Emacs does not send files to the trash by default which is counter-intuitive for many beginning users. /In order to risk losing files it is a good idea to turn on the option to send all files to the system trash./
 #+begin_src emacs-lisp :tangle yes
   ;; Send deleted files to the system's trash
   (setq delete-by-moving-to-trash t)
 #+end_src
*** Backup Files with Version Control
 Emacs has a built-in version control system in which it will create a series of backup files. This will create a number of backup flies, however, that will need to be cleaned up on a regular basis.
 #+begin_src emacs-lisp :tangle yes
   ;; Version Control
   (setq version-control t)
   (setq delete-old-versions t)
   (setq vc-make-backup-files t)
 #+end_src
** Shorten "Yes or No" to "Y or N"
To make work faster, instead of typing "yes" or "no" for each question prompt, use just "y" or "n".
#+begin_src emacs-lisp :tangle yes
  ;; Only y or n instead of yes or no
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Single Space at the End of Sentences
Emacs when navigating expects sentences to end with a double space after a period. While this makes documents written in plain text to look more attractive and more readable, this convention is not used much anymore and this will break emacs commands for killing and navigating sentences.
#+begin_src emacs-lisp :tangle yes
  ;; Sentences end with a single space
  (setq sentence-end-double-space nil)
#+end_src
** User Interface
All the changes contained here affect how Emacs looks when run such as faces, colors, backgrounds, and display.
*** All the icons
#+begin_src emacs-lisp :tangle yes
  (use-package all-the-icons
    :if (and window-system (not (file-exists-p "~/runemacs.bat")))
    :ensure t)
  
  (use-package all-the-icons-dired
    :if (and window-system (not (file-exists-p "~/runemacs.bat")))
    :ensure t
    :hook
    (dired-mode . all-the-icons-dired-mode))
  
  (use-package all-the-icons-ibuffer
    :if (and window-system (not (file-exists-p "~/runemacs.bat")))
    :ensure t
    :init (all-the-icons-ibuffer-mode 1))
  
  (use-package all-the-icons-ivy-rich
    :if (and window-system (not (file-exists-p "~/runemacs.bat")))
    :ensure t
    :config
    (all-the-icons-ivy-rich-mode 1))
#+end_src
*** Emacs Theme
**** Spacemacs Theme with Spaceline Modeline Theme
#+begin_src emacs-lisp :tangle yes
  (use-package spacemacs-theme
    :if window-system
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))
  
  (use-package spaceline
    :if window-system
    :ensure t
    :config  
    (require 'spaceline-config)
    (spaceline-emacs-theme))
  
  (use-package spaceline-all-the-icons
    :disabled t
    :if window-system
    :ensure t
    :after spaceline
    :config
    (setq spaceline-all-the-icons-separator-type 'arrow)
    (spaceline-all-the-icons-theme)
    (spaceline-all-the-icons--setup-anzu)            ;; Enable anzu searching
    (spaceline-all-the-icons--setup-package-updates) ;; Enable package update indicator
    (spaceline-all-the-icons--setup-git-ahead)       ;; Enable # of commits ahead of upstream in git
    (spaceline-all-the-icons--setup-paradox)         ;; Enable Paradox mode line
    (spaceline-all-the-icons--setup-neotree))         ;; Enable Neotree mode line
#+end_src
*** Display Time
This will display the time in the Emacs mode line. This can be very useful if task bars are hidden on the desktop or working from a text-only terminal.
#+begin_src emacs-lisp :tangle yes
  ;;Display Time
  (display-time-mode 1)
#+end_src
*** Menu Bar, Scroll Bar, and Tool Bar
Turn off the menu bar, scroll bar, and tool bar because it looks so darn cool and I tend to use the keyboard for everything now anyways.
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
#+end_src
*** ~nyan-mode~
Display a nyan cat on the mode line that shows progress through a buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package nyan-mode
    :if window-system
    :ensure t
    :commands nyan-mode
    :config
    (setq nyan-wavy-trail t))
#+end_src
* Coding
** C
#+begin_src elisp :tangle yes
  (use-package c-mode
    :mode ("\\.c\\'"
           "\\.ino\\'"))
#+end_src
** Numpydoc
#+begin_src emacs-lisp :tangle yes
  (use-package numpydoc
    :ensure t
    :bind (:map python-mode-map
                ("C-c C-n" . numpydoc-generate)))
#+end_src
** Elpy
#+begin_src emacs-lisp :tangle yes
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :custom
    (elpy-rpc-python-command "python3")
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (elpy-formatter 'black)
    :config
    ;; Check python syntax while writing with flycheck
    (when (load "flycheck" t t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode)))
  
  (add-hook 'elpy-mode-hook (lambda ()
                              (add-hook 'before-save-hook
                                        'elpy-black-fix-code nil t)))
#+end_src
** Flycheck
Install flycheck mode so that python syntax can be checed while typing.
#+begin_src emacs-lisp :tangle yes
      (use-package flycheck
        :ensure t
        :defer t)
#+end_src
** Magit
Magit provides an interface to Git through Emacs.
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+end_src
** Paren Mode
Paren Mode 
#+begin_src emacs-lisp :tangle yes
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+end_src
* Company Auto-completion
Use Company (COMPlete ANY) package to enable autocompletion in buffers.
#+begin_src emacs-lisp :tangle yes
  (use-package company               
    :ensure t
    :defer t
    :init (global-company-mode))
  ;; Documentation popups for Company
  (use-package company-quickhelp
    :ensure t
    :defer t
    :init (add-hook 'global-company-mode-hook #'company-quickhelp-mode))
  ;; Add autocompletion for python
  (use-package company-anaconda
    :ensure t
    :defer t)
  ;; Add autocompletion for AUCTeX
  (use-package company-auctex
   :ensure t
   :defer t)
  ;; Add autocompletion for Ledger
  (use-package company-ledger
   :ensure t
   :defer t)
  ;; Add autocompletion for org-mode blocks
  (use-package company-org-block
   :ensure t
   :defer t)  
#+end_src
* BBDB
#+begin_src emacs-lisp :tangle yes
  (use-package bbdb
    :ensure t
    :defer t
    :hook
    (gnus-summary-mode . (lambda ()
                           (define-key gnus-summary-mode-map (kbd ";") 'bbdb-mua-edit-field)))
    :custom
    (bbdb-file "~/Dropbox/bbdb")
    (bbdb-use-pop-up 'horiz)
    :config
    (bbdb-mua-auto-update-init 'gnus 'message)
    (setq bbdb-mua-update-interactive-p '(query . create))
    ;; Look at every address in a message, not just the first
    (setq bbdb-message-all-addresses t))
#+end_src
* Deft
Deft is an Emacs package that makes it easier to make quick notes that can be easily searched later. Deft allows for searching the full text of notes and the search results get narrowed down as you
#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :after org
    :defer t
    :bind
    ("C-c n d" . deft)
    :commands (deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/Dropbox/org-roam/")
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
    (deft-use-filename-as-title t))
#+end_src
* Dired
The following customizations make emacs dired mode behave in a similar fashion to other file browsing tools such as midnight commander. While there are many great file management tools out there. I keep coming back to emacs dired because of the keyboard commands and flexibility.
** Move/Rename/Copy Files to Another Pane
This will cause emacs to default to moving/copying/renaming files from the directory in one dired buffer to another in a split-window. This will allow emacs to operate more like midnight commander, total commander, double commander, etc.
 #+begin_src emacs-lisp :tangle yes
   ;; Copy files from one pane to another
   (setq dired-dwim-target t)
 #+end_src
** Use Dired+ for Windows
Dired+ allows for better functionality when using Emacs as a portable applicatoin. =:if (memq window-system '(w32 pc ns))= will cause dired+ to only load on non-Linux systems.
#+begin_src emacs-lisp :tangle yes
  (use-package dired+
    ;; Only use dired+ if used on a Windows device as vanilla dired works just find on any other OS
    :if (memq window-system '(w32 pc ns))
    :defer t
    :load-path "~/.emacs.d/elisp")
#+end_src
* Docker
** Manage Docker Containers
#+begin_src emacs-lisp :tangle yes
  (use-package docker
    :if (executable-find "docker")
    :ensure t
    :bind ("C-c d" . docker))
#+end_src
** Docker Compose
#+begin_src emacs-lisp :tangle yes
  (use-package docker-compose-mode
    :ensure t)
#+end_src
* Ensure System Package
ensure-system-package will install packages on the computer system so that Emacs components are functional and not broken. In order to prevent ~ensure-system-package~ from installing when it is run as a portableapp from a flash drive onto the work computer, ~use-package~ will check to see if =~/runemacs.bat= can be found on the flash drive.
#+begin_src elisp :tangle yes
  (use-package use-package-ensure-system-package
    :if (not (file-exists-p "~/runemacs.bat")) 
    :ensure t)
#+end_src
* Eshell
** Set up Eshell
#+begin_src emacs-lisp :tangle yes :noweb tangle
  (use-package eshell
    :defer t
    :hook
    (eshell-mode . (lambda ()
                     ;; Run interactive shell commands in the Emacs ansi-term
                     <<eshell_visual_commands>>
                     ;; Set aliases for commands in eshell
                     <<eshell_aliases>>))
    :config
    (setq eshell-error-if-no-glob t
          ;; Ignore duplicate history entries
          eshell-hist-ignoredups t
          eshell-save-history-on-exit t
          eshell-destroy-buffer-when-process-dies t)
    (setenv "PAGER" "cat"))
  
  (use-package em-smart
    :defer t
    :custom
    (eshell-smart-space-goes-to-end t)
    (eshell-where-to-jump 'begin)
    (eshell-review-quick-commands nil))
  #+end_src
** Eshell Visual Commands
Many commands when run in eshell turn into a mess as it is not an ansi-term. Any interactive commands that need the full ansi-term to display properly are listed below so that when they are run from the eshell they will open in ansi-tem and display properly.
#+name: eshell_visual_commands
#+begin_src elisp
  (add-to-list 'eshell-visual-commands "htop")
  (add-to-list 'eshell-visual-commands "ipython")
  (add-to-list 'eshell-visual-commands "rclone")
  (add-to-list 'eshell-visual-commands "ssh")
  (add-to-list 'eshell-visual-commands "tail")
  (add-to-list 'eshell-visual-commands "top")
#+end_src
** Eshell Aliases
Below are a list of command-line aliases for use in eshell.
#+name: eshell_aliases
#+begin_src elisp
  (eshell/alias "ff" "find-file $1")
  (eshell/alias "emacs" "find-file $1")
  (eshell/alias "untar" "tar -zxvf")
  (eshell/alias "cpv" "rsync -ah --info=progress2")
  (eshell/alias "ll" "ls -AlohG")
#+end_src
** Change Eshell Prompt to be More Informative
#+begin_src emacs-lisp :tangle yes
  (setq eshell-prompt-function
        (lambda ()
          (concat
           (propertize "┌─[" 'face `(:foreground "green"))
           (propertize (user-login-name) 'face `(:foreground "red"))
           (propertize "@" 'face `(:foreground "green"))
           (propertize (system-name) 'face `(:foreground "blue"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (format-time-string "%H:%M" (current-time)) 'face `(:foreground "yellow"))
           (propertize "]──[" 'face `(:foreground "green"))
           (propertize (concat (eshell/pwd)) 'face `(:foreground "white"))
           (propertize "]\n" 'face `(:foreground "green"))
           (propertize "└─>" 'face `(:foreground "green"))
           (propertize (if (= (user-uid) 0) " # " " $ ") 'face `(:foreground "green"))
           )))  
  #+end_src
* Flyspell-mode
Flyspell mode can be hooked to various buffer modes so that spell-checking can be done as typing occurs. As you type, a red wavy line will appear under text that it deems to be incorrectly spelled. 
#+begin_src emacs-lisp :tangle yes
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src
* Gnus
See the =~/gnus.el= file for configuration information.
#+begin_src emacs-lisp :tangle yes
  (setq gnus-init-file "~/.emacs.d/gnus.el")
#+end_src
* Gnuplot-mode
Gnuplot mode can be used for editing files that are used to define a plot style and layout and allow for execution of the code in an Emacs buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package gnuplot
    :ensure t
    :defer t)
  (use-package gnuplot-mode
    :ensure t
    :defer t)
#+end_src
* ibuffer
#+begin_src emacs-lisp :tangle yes
  (use-package ibuffer
    :defer t
    :bind
    ("C-x C-b" . ibuffer)
    :hook
    ;; Start ibuffer with default groupings
    (ibuffer-mode .  (lambda ()
                            (ibuffer-switch-to-saved-filter-groups "default")))
    :config
    ;; Create default groupings for ibuffer
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("Dired" (mode . dired-mode))
                   ("Emacs" (or
                             (name . "^\\*scratch\\*$")            
                             (name . "^\\*Messages\\*$")
                             (name . "^\\*GNU Emacs\\*$")
                             (name . "^\\*Help\\*$")
                             (name . "^\\*Calendar\\*$")
                             (name . "^\\*Calculator\\*$")
                             (name . "^\\*Calc Trail\\*$")
                             (name . "^\\*Completions\\*$")))
                   ("Gnus" (or
                            (mode . message-mode)
                            (mode . bbdb-mode)
                            (mode . mail-mode)
                            (mode . gnus-group-mode)
                            (mode . gnus-summary-mode)
                            (mode . gnus-article-mode)
                            (name . "^\\.bbdb$")
                            (name . "^\\.newsrc-dribble")))
                   ("Org"   (or
                             (mode . org-mode)
                             (name . "^\\*Org Agenda\\*$")))
                   ("Shell"   (or
                               (mode . eshell)
                               (mode . term)
                               (mode . shell))))))))
#+end_src 
* Ivy
Ivy is a system to make entering commands in Emacs easier by narrowing down the possible choices when keybindings such as M-x are issued.
#+begin_src emacs-lisp :tangle yes
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
  
  (use-package counsel
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    :ensure t
    :config
    (counsel-mode))
  
  (use-package swiper
    :bind
    ("C-s" . swiper)
    :ensure t)
  
  (use-package ivy-rich
    :ensure t
    :after counsel
    :config
    (ivy-rich-mode 1)
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))
#+end_src
* LaTeX
Modifcations to buffers with TeX and LaTeX major modes.
** AUCTeX
Use AUCTEX for writing documents using LaTeX.
#+begin_src emacs-lisp :tangle yes
  (use-package tex
    :defer t
    :ensure auctex
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil))
#+end_src
** Use BibLaTeX
#+begin_src emacs-lisp :tangle yes
(setq bibtex-dialect 'biblatex)
#+end_src
* Ledger
To conduct plain-text accounting in Emacs, ~ledger-mode~ needs to be installed from the package repositories. This mode will create faces for the text and highlight transactions while also providing the functionality to execute ledger reports in an Emacs buffer. No shell needed.
#+begin_src emacs-lisp :tangle yes
  (use-package ledger-mode
    :ensure t
    :defer t)
#+end_src
* Markdown Mode
#+begin_src elisp :tangle yes
  (use-package markdown-mode
    :ensure t
    :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
    :config
    (bind-key "A-b" (surround-text-with "+*") markdown-mode-map)
    (bind-key "s-b" (surround-text-with "**") markdown-mode-map)
    (bind-key "A-i" (surround-text-with "*") markdown-mode-map)
    (bind-key "s-i" (surround-text-with "*") markdown-mode-map)
    (bind-key "A-=" (surround-text-with "`") markdown-mode-map)
    (bind-key "s-=" (surround-text-with "`") markdown-mode-map))
#+end_src
* Multiple Cursors
Multiple cursors allows for editing emacs buffers at multiple locations simultaneously at the same time. This is great for things where multiple lines need the same text edited or added.
#+begin_src emacs-lisp :tangle yes
  ;; Turn on multiple cursors for editing multiple points at the same time.
  (use-package multiple-cursors
    :ensure t
    :defer t
    :bind
    ("C-S-c C-S-c" . 'mc/edit-lines)
    ("C->" . 'mc/mark-next-like-this)
    ("C-<" . 'mc/mark-previous-like-this)
    ("C-c C-<" . 'mc/mark-all-like-this))
#+end_src
* Org-mode
~org-mode~ is the powerful task management, calendar, agenda, publishing system, and code documentation tool all-in-one that really extends the power of Emacs. I use ~org-mode~ for the following:
- Organizing my tasks and projects similar to David Allen's "Getting Things Done" method
- Publishing LaTeX documents in a simpler and faster way
- Saving reusable code snippets with documentation that can be executed from within Emacs as how this file was created.
** Initial Setup
#+begin_src emacs-lisp :tangle yes :noweb tangle
  (custom-set-variables '(org-agenda-files
                          `("~/Dropbox/gtd")))
  
  (use-package org
    :mode (("\\.org$" . org-mode))
    :bind
    ("C-c c" . org-capture)
    ("C-c a" . org-agenda)
    (:map org-mode-map
          ("C-c l" . org-store-link))
    :ensure org-plus-contrib
    :hook (org-mode . turn-on-flyspell)
    :custom
    <<org_customize>>
    ;; Show org-mode the default directory in which to keep org-mode files
    (org-directory "~/Dropbox/gtd")
  
    ;; Change the color of the org-todo keywords to make it easier to see them on a color screen and distinguish between them.
    (org-todo-keyword-faces
          '(("TODO" . org-warning)
            ("WAITING" . "yellow")
            ("CANCELED" . (:foreground "blue" :weight bold))
            ("DONE" . org-done)))
  
    ;; Keep only a single space between the headline and the tag
    (org-tags-column 0)
  
    ;; Don't inherit project tags
    (org-tags-exclude-from-inheritance '("project"))
  
    ;; Place all notes captured that are not filed into the default inbox file
    (org-default-notes-file (concat org-directory "/inbox.org"))
  
    ;; In order to refile/move tasks from the inbox to other agenda files and subtrees, the following must be set:
    (org-refile-targets '((org-agenda-files :maxlevel . 3)))
  
    ;; The following will allow for refiling org-mode tasks at the top of a file.
    ;; Setting this will also require turning off completing the path in steps if ivy-mode autocompletiion is used.
    (org-refile-use-outline-path 'file)
    (org-outline-path-complete-in-steps nil)
  
    ;; Setting this variable allows for refiling tasks under a new heading on the fly
    (org-refile-allow-creating-parent-nodes (quote confirm))
  
    ;; Define a stuck project as any headline with the project keyword which has no TODO item below it.
    (org-stuck-projects
     '("+project/-MAYBE-DONE" ("NEXT" "TODO") nil "\\<IGNORE\\>"))
  
    ;; Set up the sequence of org-todo task keywords to allow for delegated(WAITING) tasks and CANCELLED tasks.
    (org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
  
    ;; Use biblatex instead of bibtex
    (org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
        "biber %b"
        "pdflatex -interaction nonstopmode -output-directory %o %f"
        "pdflatex -interaction nonstopmode -output-directory %o %f"))
  
    :config
  
    ;; Wrap lines at window edge in org-mode
    (add-hook 'org-mode-hook #'toggle-truncate-lines)
  
    ;; Load languages to use in org-babel
    <<babel_languages>>
    ;; This package will allow for the use of the :ignore: tag that can be used to remove headers from exported content.
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines)))
#+end_src
** Org-babel Languages
In order to use active code in org-mode, you must define which programming languages to load. For any programming language you wish to use, it must be added to the ~org-babel-load-languages~ list.
#+name: babel_languages
#+begin_src elisp
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((awk . t)
                                 (calc . t)
                                 (css . t)
                                 (emacs-lisp . t)
                                 (eshell . t)
                                 (gnuplot . t)
                                 (dot . t)
                                 (latex . t)
                                 (ledger . t)
                                 (octave . t)
                                 (plantuml . t)
                                 (R . t)
                                 (sed . t)
                                 (shell . t)))
#+end_src
** Appearance
*** Use "Clean View"
Start all Emacs org-mode buffers with "clean-view" turned on. This makes it easier to see and read org-mode files as all the extra asterisks in the headings wil be hidden leading to more empty white space and a cleaner look.
#+begin_src elisp :noweb-ref org_customize
  (org-startup-indented t)
#+end_src
*** Native Tabs
This will allow for source code blocks in emacs org-mode to be internally indented as they would normally be in their majors modes.
#+begin_src elisp :noweb-ref org_customize
  (org-src-tab-acts-natively t)
 #+end_src
*** Change Bullets to Look Like Spacemacs
I was envious of the org-mode look in Spacemacs and discovered that the bullets that are used in Spacemacs can be achieved by using the ~org-bullets~ package and leaving it on the default settings.
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :if window-system
    :ensure t
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src
** Calfw-org
~org-calfw~ provides a grid-based calendar view similar to what is seen in most graphical calendar programs but integrates the org agenda files.
#+begin_src emacs-lisp :tangle yes
  (use-package calfw
    :disabled t
    :ensure t
    :config
    (setq cfw:fchar-junction ?╋
          cfw:fchar-vertical-line ?┃
          cfw:fchar-horizontal-line ?━
          cfw:fchar-left-junction ?┣
          cfw:fchar-right-junction ?┫
          cfw:fchar-top-junction ?┯
          cfw:fchar-top-left-corner ?┏
          cfw:fchar-top-right-corner ?┓))
  
  (use-package calfw-org
    :disabled t
    :ensure t
    :requires calfw
    :config
    (defalias 'calfworg 'cfw:open-org-calendar))
#+end_src
** Org-agenda
Defer loading ~org-agenda~ until it is called by =C-c a= to speed up Emacs loading time. I also prefer to have the current day at the beginning of the week so all current items are at the top of the agenda and I can look 6 days into the future.
#+begin_src emacs-lisp :tangle yes
  (use-package org-agenda
      :ensure nil
      :after org
      :custom
      (org-agenda-start-on-weekday nil))
  #+end_src
** Org-capture
Set up templates for making capturing tasks with ~org-capture~ easier.
#+begin_src emacs-lisp :tangle yes :noweb tangle
  (use-package org-capture
  :ensure nil
  :after org
  :config
  ;; Set the default org-capture-templates to make creating an org-headline quick and easy
  <<org_capture_templates>>)
#+end_src
*** Org-capture Templates
Org-capture templates make creating org-mode notes quicker and easier from any buffer using a standard template for each not type.
#+name: org_capture_templates
#+begin_src elisp
  (setq org-capture-templates
        '(("p" "Projects item" entry (file "~/Dropbox/gtd/projects.org")
           "* %? :project:")
          ("s" "Someday/Maybe item" entry (file "~/Dropbox/gtd/someday.org")
           "* %?\n%x")
          ("T" "Tickler file item" entry (file "~/Dropbox/gtd/tickler.org")
           "* %?\n%^{Scheduled}t\n%x")
          ("t" "To Do Item" entry (file+headline "~/Dropbox/gtd/inbox.org" "Tasks")
           "* TODO %? %^G\nSCHEDULED: %^{Scheduled}t DEADLINE: %^{Deadline}t\n%x")))
#+end_src
** Org-download
I have not yet tried this feature yet...
#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))
#+end_src
** Org-mind-map
Turn any ~org-mode~ buffer into a mind map in various output formats.
#+begin_src emacs-lisp :tangle yes
  ;; This is an Emacs package that creates graphviz directed graphs from
  ;; the headings of an org file
  (use-package org-mind-map
    :ensure t
    :after org
    :commands org-mind-map-write
    :init
    (require 'ox-org)
    :ensure-system-package (gvgen . graphviz)
    :custom
    (org-mind-map-engine "dot"))
#+end_src
** Org-ref
A reference manager in org-mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-ref
    :ensure t
    :defer t
    :after org)
#+end_src
** Org-roam
~org-roam~ adds features to make linking org notes easier and provided a database file to connect all the notes together.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :ensure t
    :defer t
    :after org
    :init
    (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org-roam"))
    :config
    (org-roam-setup)
    (setq org-roam-dailies-directory "daily/")
    (setq org-roam-capture-templates
          '(("d" "default" plain "%?"
             :target (file+head "${slug}.org"
                                "#+title: ${title}\n")
             :unnarrowed t)))
    (setq org-roam-dailies-capture-templates
          '(("d" "default" entry
             "* %?"
             :target (file+head "%<%Y-%m-%d>.org"
                                "#+title: %<%Y-%m-%d>\n"))))
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n g" . org-roam-graph)
     ("C-c n r" . org-roam-node-random)		    
     (:map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n o" . org-id-get-create)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n l" . org-roam-buffer-toggle)))))
#+end_src
* PDF Tools
PDF Tools is a faster and more feature-rich than the built in DocView.
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :ensure t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-loader-install :no-query))
#+end_src
* PlantUML
PlantUML is a language that can interpret code to create flowcharts and UML diagrams. The syntax is similar to programming languages thereby making it fast and easy to create accurate, auto-generated charts that don't require a lot of dragging boxes around as you might with a graphical tool such as LibreOffice Draw.
** Set Location of PlantUML Binary
When Emacs is run as a portable app on a USB drive, Emacs needs to know the location of the PlantUML executable which I place in the .emacs.d directory.
#+begin_src emacs-lisp :tangle yes
  (setq org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))
#+end_src
** Install PlantUML Mode
PlantUML mode is not installed by default, so we need ~use-package~ to download and install it.
#+begin_src emacs-lisp :tangle yes
  (use-package plantuml-mode
    :ensure t
    :defer t
    :after org)
#+end_src
* Tramp
#+begin_src elisp :tangle yes
  (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+end_src
* Which-key
~which-key~ provides a pop-up menu when there is a pause in the minibuffer or if executed directly to show the keyboard commands available to the current buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package which-key
    :ensure t
    :config
    ;; Type C-h during any key combination to pop-up which key
    (setq which-key-show-early-on-C-h t)
    ;; Use the <f4> key in any major mode to see the key bindings
    (global-set-key (kbd "<f4>") 'which-key-show-major-mode)
    (which-key-mode)
    ;; Set up which-key to use the side window preferrably
    (which-key-setup-side-window-right-bottom))
#+end_src
* Performance Optimization End
#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold (* 2 1000 1000))
  )
#+end_src
