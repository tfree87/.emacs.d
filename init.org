# -*- eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t); -*-
#+title: Emacs Configuration
#+authgor: Thomas Freeman
#+date: Time-stamp: <2022-02-18 19:02:47 thomas>
#+description: This org-mode file contains an org-babel implementation of the .emacs or /.emacs.d/init.el file.
#+language: en
#+property: header-args :results silent :exports code
#+options: tex:t


Welcome to my Emacs configuration! This file contains the code along with documentation for customizing my Emacs with all the options that I prefer to use by default.

This file was written using Emacs Org Mode. This makes navigating and modifying my Emacs configuration much simpler as I can place different elements of my configuration under separate headings. The code in this file is placed in source code blocks that are tangled to the ~init.el~ file that Emacs will look for upon starting. When this file is saved, the source code blocks that are marked for tangling will write their contents to ~init.el~.

* Header for init.el
The following code block will add a header to the ~init.el~ file when it is generated on saving.
#+begin_src emacs-lisp :tangle yes
  ;; -*- lexical-binding: t -*-
  ;; 
  ;;; init.el --- Emacs initialization file

  ;; Author: Thomas Freeman
  ;; Maintainer: Thomas Freeman
  ;; Created: 09 Jan 2022

  ;; URL: https://github.com/tfree87/.emacs.d

  ;; This file is an init file for Emacs.
  ;; This file IS NOT intended to be edited! It was generated by init.org.

  ;; For documentation and for editing this file, see the init.org in the
  ;; github repository tfree87/.emacs.d
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src
* Performance Optimization Start
In order to slightly reduce the load time for Emacs, the whole ~init.el~ file can be wrapped in the following let statement to speed up the load process. This can help a little when Emacs is run as a portable app from a flash drive as I often do.
** Reduce File Lookups on Loading
See https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/.
#+begin_src emacs-lisp :tangle yes
  (let ((file-name-handler-alist nil))
#+end_src

* Running Emacs as a Portable App
I like to use Emacs at work and at home to boost my productivity, but I often find when I am at work or using another computer using Windows and I cannot always install Emacs to the host system. In this case, I run Emacs from a USB thumb drive so that I can still have access to the power of Emacs even when I am not working on my home personal computer. Running Emacs from a thumb drive has some caveats. For instance, if you are running Emacs from a thumb drive on a work computer and you do not have administrator access, then a lot of features will break. This section contains code that can be used to run Emacs
** Check for Portable Emacs Instance
The following line of code below is used frequently to check for a file in the Emacs home directory called ~runemacs.bat~. The ~runemacs.bat~ is a Windows batch script created to boot Emacs from the flash drive and set the home directory to the path of ~emacshome~ on the flash disk drive. Since I include this file when I run Emacs as a portable app only, this is a simple way to check if I am running Emacs as a portable app from a flash drive.
#+name: portable_check
#+begin_src emacs-lisp
  (file-exists-p "~/runemacs.bat")
 #+end_src
** Set Location of Portable Git
Straight.el cannot operate without access to Git. Luckily, there is a portable version of Git ([[https://github.com/sheabunge/GitPortable][sheabunge/GitPortable]]) for Windows that can be installed on the [[https://portableapps.com/][PortableApp]] platform to provide access to Git without having it installed on the host system. After downloading GitPortable, we need to tell Emacs where it can find the binary executable so that Emacs programs can call Git when needed.

The following line code will check to see if Emacs is being run as a portable app and, if it is, then add the path where git.exe can be found to the ~exec-path~ list:
 #+begin_src emacs-lisp :tangle yes :noweb no-export
(when <<portable_check>>
    (add-to-list 'exec-path "~/PortableApps/GitPortable/App/Git/bin"))
 #+end_src

* Custom Set Variables
In order to keep variables set by the customize interface or set during Emacs at runtime from being placed at the top of ~init.el~, I set the variables set from Emacs customize to be put into a separate file [[./custom.el]].
#+name: custom-file
#+begin_src emacs-lisp :tangle yes

  ;; Set the location of variables set using Emacs cusmtomize interface

  (setq custom-file "~/.emacs.d/custom.el")
#+end_src
Once the file location has been set, Emacs needs to load the custom file. This needs to be done early in the loading process because it contains the addresses for the package repositories. If this is not loaded before refeshing packages and making calls to ~use-package~, then the ~:ensure~ command will not be able to pull the packages and install them.
#+name: load-custom
#+begin_src emacs-lisp :tangle yes

  ;; Load the file custom.el file containing variables from Emacs customize

  (load custom-file)
#+end_src
* Package Management
In this section, I have included customization to replace the default Emacs package manager with [[https://github.com/raxod502/straight.el][straight.el]]. Some reasons for making this switch are:

1. It is easier to avoid conflicts with different package repositories such as duplicates packages in ELPA and MELPA.
2. I can define a specific fork to use for a specific package to get bug fixes or modifications.
3. The entire package repository is cloned, which, while it takes up a lot of space, allows for editing the source code directly if desired.
4. Github repositories that are not included in ELPA, MELPA, or marmalade can be pulled and used in ~use-package~ statements.
 
** Straight.el
Instead of using the built-in package manager, use ~straight.el~ to pull all the packages straight from their repositories.
#+begin_src emacs-lisp :tangle yes

  ;; Install Straight.el to manage packages by downloading directly from repositories

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
 #+end_src
** Install use-package
Use ~straight.el~ to install ~use-package~ to manage Emacs packages.
#+begin_src emacs-lisp :tangle yes
  ;; Packages

  (straight-use-package 'use-package)
#+end_src
* Track Load Time
The benchmark init package allows me to track how long each component of my Emacs init takes to load. Normally, a long load time for Emacs would not bother me, however, as I use this same configuration for the portable version of Emacs that I run from a flash drive, decreasing the init time is critical as the thumb drive runs extremely slow in comparison to the native desktop application.
#+begin_src emacs-lisp :tangle yes
  (use-package benchmark-init
    :straight t
    :config
    (benchmark-init/activate)
    (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+end_src
* No-littering
The no-littering package will put Emacs configuration files for many third-party packages into separate folders under ~.emacs.d/etc/~ to help keep the ~.emacs.d/~ from getting to cluttered with different configuration files.
#+begin_src emacs-lisp :tangle yes
  (use-package no-littering
    :straight (no-littering :host github
                            :repo "emacscollective/no-littering"
                            :branch "master"))
#+end_src
* Emacs Options
The code below collects customizations for Emacs built-in components.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package emacs
    :custom
    <<emacs_custom>>
    :hook
    <<emacs_hooks>>
    :config
    <<emacs_config>>)
#+end_src
** General Configuration
This section contains modifications for Emacs that affect the behavior in nearly all buffers.
*** Register Delay
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (register-preview-delay 0)
#+end_src
*** Automatic Time Stamps
Emacs supports time stamps in any text buffer where ~Time-stamp: <>~ can be found in the first eight lines. The ~time-stamp~ command can then be used to automatically update the time. A simpler solution, however, is to have Emacs automatically update the time stamp when the buffer is saved.
#+begin_src emacs-lisp :noweb-ref emacs_hooks
  (before-save . 'time-stamp)  
#+end_src
*** Completion by Pressing Tab
~<TAB>~ will indent lines by default. In order to turn ~<TAB>~ into a button that activates autocomplete, the ~tab-always-indent~ variable must be set to ~complete~. This will cause pressing ~<TAB>~ once to indent, and twice will cause it to activate autocomplete.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (tab-always-indent 'complete)
#+end_src
*** Completion Cycling
Cycle through completion candidates by pressing the completion key.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (completion-cycle-threshold t)
#+end_src
*** File Deletion and Backup
Changing how Emacs deletes files and how it creates backups.
**** Send Deleted Files to System Trash
 Emacs does not send files to the trash by default which is counter-intuitive for many beginning users. /In order to risk losing files it is a good idea to turn on the option to send all files to the system trash./
 #+begin_src emacs-lisp :noweb-ref emacs_custom
   (delete-by-moving-to-trash t)
 #+end_src
**** Backup Files with Version Control
 Emacs has a built-in version control system in which it will create a series of backup files. This will create a number of backup flies, however, that will need to be cleaned up on a regular basis.
 #+begin_src emacs-lisp :noweb-ref emacs_custom
   (version-control t)
   (delete-old-versions t)
   (vc-make-backup-files t)
 #+end_src
*** Inhibit Startup Screen
After seeing the startup screen hundreds of times, there is no longer any need to load it on startup as it no longer contains any new information.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (inhibit-startup-screen t)
#+end_src
*** Number Line Mode
I like have line numbers turned on all the time even if it reduces some screen space. With wide monitors these days it is less of an issue and I can always toggle ~dispaly-line-numbers-mode~ on the fly if I want to hide the line numbers.
#+begin_src emacs-lisp :noweb-ref emacs_config
    (when (version<= "26.0.50" emacs-version)
      (add-hook 'text-mode-hook 'display-line-numbers-mode)
      (add-hook 'prog-mode-hook 'display-line-numbers-mode))
#+end_src
*** Save Work Session
The following option will cause Emacs to always save the state of Emacs when it was closed. Local buffers, tabs in ~tab-bar-mode~, and window arrangements are all saved if possible. Turning this on makes it much simpler to continue working on the same projects when Emacs is closed and then opened again.
#+begin_src emacs-lisp :noweb-ref emacs_custom
(desktop-save-mode t)
#+end_src
*** Shorten "Yes or No" to "Y or N"
To make work faster, instead of typing "yes" or "no" for each question prompt, use just "y" or "n".
#+begin_src emacs-lisp :noweb-ref emacs_config
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Show Column Number
I find it useful to have the column number displayed in the modeline in Emacs.
#+begin_src emacs-lisp :noweb-ref emacs_config
  (column-number-mode 1)
#+end_src
*** Single Space at the End of Sentences
Emacs when navigating expects sentences to end with a double space after a period. While this makes documents written in plain text to look more attractive and more readable, this convention is not used much anymore and this will break emacs commands for killing and navigating sentences.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (sentence-end-double-space nil)
#+end_src
*** User Interface
All the changes contained here affect how Emacs looks when run such as faces, colors, backgrounds, and display.
**** All the Icons
I like to use All the Icons to add some graphical elements to dired and the minibuffer. I find it makes it easier to see what types of files are being listed and it is just fun too.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package all-the-icons
    :if (not <<portable_check>>)
    :defer 1
    :straight t)
#+end_src
***** Dired
Add file-type icons to Dired when browsing files and directories. I find this very helpful to quickly have visual cues to find the correct files in the Dired buffer.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package all-the-icons-dired
    :if (not <<portable_check>>)
    :straight t
    :hook
    (dired-mode . all-the-icons-dired-mode))
 #+end_src
***** Ibuffer
Add icons representing different buffer types to Ibuffer mode.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package all-the-icons-ibuffer
    :if (not <<portable_check>>)
    :straight t
    :hook (ibuffer-mode . all-the-icons-ibuffer-mode))
#+end_src
***** Completion
This will add icons for many Emacs minibuffer completion systems so that files and directories will have icons in the minibuffer when called with ~C-x C-f~ and other similar commands.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package all-the-icons-completion
    :if (not <<portable_check>>)
    :straight t
    :defer 3
    :config
    (all-the-icons-completion-mode)
    (add-hook 'marginalia-mode-hook #'all-the-icons-completion-marginalia-setup))
#+end_src
**** Emacs Theme
This section contains modifications to the default Emacs theme.
***** Doom Theme
I have switched to the Doom theme ~doom-vibrant~ because I find the colors appealing and it has been easier to configure than my earlier attempts to configure a Spacemacs-like theme.
****** Color Theme
#+begin_src emacs-lisp :tangle yes
  (use-package doom-themes
    :if window-system
    :straight t
    :defer 1
    :config
    (load-theme 'doom-vibrant t)
    (doom-themes-org-config))
#+end_src
****** Doom Modeline
I like the Doom modeline because it has icons and bright colors.
#+begin_src emacs-lisp :tangle yes
  (use-package doom-modeline
    :if window-system
    :straight t
    :defer 1
    :config (doom-modeline-mode))
#+end_src
**** Display Time
This will display the time in the Emacs mode line. This can be very useful if task bars are hidden on the desktop or working from a text-only terminal.
#+begin_src emacs-lisp :noweb-ref emacs_config
  (display-time-mode 1)
#+end_src
**** Menu Bar, Scroll Bar, and Tool Bar
Turn off the menu bar, scroll bar, and tool bar because it looks so darn cool and I tend to use the keyboard for everything now anyways.
#+begin_src emacs-lisp :noweb-ref emacs_config
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (toggle-scroll-bar -1)
#+end_src
**** Nyan Mode
Display a nyan cat on the mode line that shows progress through a buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package nyan-mode
    :if window-system
    :straight t
    :defer 3
    :delight
    :custom
    (nyan-wavy-trail t)
    :config
    (nyan-mode)
    (nyan-start-animation))
#+end_src
* Ace-Window
#+begin_src emacs-lisp :tangle yes
  (use-package ace-window
    :straight t
    :bind ("M-o" . ace-window))
#+end_src
* Autocompletion
This section contains configuration for auto-completion utilities in Emacs.
** Corfu
Use Corfu for in-buffer completion.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package corfu
    :straight t
    :custom
    (corfu-cycle t)
    (corfu-preselect-first nil)
    <<tab-selection>>
    :init
    (corfu-global-mode)
    :config
    <<corfu-config>>)
#+end_src
*** Use TAB for Selecting Candidates
Instead of using M-tab which will switch windows in XFCE---my default desktop---use TAB to cycle between the different possible options.
#+name: tab-selection
#+begin_src emacs-lisp
  :bind
  (:map corfu-map
        ("TAB" . corfu-next)
        ([tab] . corfu-next)
        ("S-TAB" . corfu-previous)
        ([backtab] . corfu-previous))
#+end_src
*** Enable Corfu for Command Evaluation in Minibuffer
When running lisp code or shell commands in the minibuffer, use Corfu to offer completion suggestions.
#+name: corfu-minibuffer
#+begin_src emacs-lisp :noweb-ref corfu-config
  (defun corfu-enable-in-minibuffer ()
    "Enable Corfu in the minibuffer if `completion-at-point' is bound."
    (when (where-is-internal #'completion-at-point (list (current-local-map)))
      (corfu-mode 1)))
  (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)
#+end_src
*** Use Corfu in Eshell
Use Corfu to complete commands in Eshell
#+begin_src emacs-lisp :noweb-ref corfu-config
  (add-hook 'eshell-mode-hook
            (lambda ()
              (setq-local corfu-quit-at-boundary t
                          corfu-quit-no-match t
                          corfu-auto nil)
              (corfu-mode)))

  ;; Silence the pcomplete capf, no errors or messages!
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

  ;; Ensure that pcomplete does not write to the buffer
  ;; and behaves as a pure `completion-at-point-function'.
  (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)
#+end_src
*** Corfu-doc
Corfu-doc will bring up documentation results in a separate pop-up next to the corfu pop-up with the documentation of any function or variable results that are selected.
#+begin_src emacs-lisp :tangle yes
  (use-package corfu-doc
    :straight (corfu-doc :host github
                         :repo "galeo/corfu-doc"
                         :branch "main")
    :hook
    (corfu-mode . corfu-doc-mode)
    :config
    (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down)
    (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up))
#+end_src
*** Cape
Cape provides some extensions for corfu.
#+name: cape
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package cape
    :straight t
    :bind (("C-c p p" . completion-at-point)
           ("C-c p t" . complete-tag)
           ("C-c p d" . cape-dabbrev)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex))
    :init
    <<capfs>>)
#+end_src
*** Cape Completion Functions
Cape provides a number of ~completion-at-point~ functions that can be used. Below are the functions that I use that have not been intrusive.

The following will complete file names in buffers:
#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-file)
#+end_src

This will complete items in TeX and LaTeX modes:
#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-tex)
#+end_src

Search other buffers for completion candidates:
#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
#+end_src

Complete keywords in programming modes:
#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-keyword)
#+end_src

Complete Emacs-lisp symbols:
#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-symbol)
#+end_src
** Minibuffer Completion
This section contains customization to improve command completion in the minibuffer in Emacs.
*** Embark
Embark provides the ability to execute commands on completion options found in the minibuffer.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (defun sudo-find-file (file)
    "Open FILE as root."
    (interactive "FOpen file as root: ")
    (when (file-writable-p file)
      (user-error "File is user writeable, aborting sudo"))
    (find-file (if (file-remote-p file)
                   (concat "/" (file-remote-p file 'method) ":"
                           (file-remote-p file 'user) "@" (file-remote-p file 'host)
                           "|sudo:root@"
                           (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                 (concat "/sudo:root@localhost:" file))))

  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    <<embark_config>>
    (define-key embark-file-map (kbd "S") 'sudo-find-file))
#+end_src
*** Embark Mode Line
Hide the mode line of the Embark live/completions buffers.
#+begin_src emacs-lisp :noweb-ref embark_config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src
*** Embark Integration with Consult
Allow use of Embark commands after issuing a Consult command.
#+begin_src emacs-lisp :tangle yes
  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src 
*** Vertico
Vertico removes the ~*Completions*~ buffer and instead, populates a vertical list of completion options in the minibuffer region. This is similar to other completion tools in Emacs such Helm, Ivy, Selectrum, and icomplete-vertical.
#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :straight t
    :demand t
    :custom
    (vertico-cycle t)
    (vertico-resize t)
    :init
    (vertico-mode))
#+end_src
*** Orderless
Orderless will allow for seaching in the minibuffer using text broken up by spaces in which the order does not matter. For instance, if ~M-x~ is entered the search results will be the same if searching for a function by using the search key ~find file~ or ~file find~. Both entries will return the function ~find-file~ as the top result.
#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :straight t
    :defer 5
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src
*** Savehist
Savehist will save the selections from completion history between Emacs sessions. This makes it so that commonly used commands and files will float to the top of the minibuffer in [[Vertico]].
#+begin_src emacs-lisp :tangle yes
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
  #+end_src
*** Marginalia
Marginalia provides annotations to items in the minibuffer similar to what is accomplished in [[Ivy]].
#+begin_src emacs-lisp :tangle yes
  (use-package marginalia
    :straight t
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src
* Coding
This section contains customizations for writing programming code in Emacs.
** Aggressive Indent Mode
Aggressive indent mode will keep code indented by the correct amount as you type in real time. This saves having to go back and reformat all the tabbing in code after making changes.
#+begin_src emacs-lisp :tangle yes
  (use-package aggressive-indent
    :straight t
    :delight t
    :hook
    (prog-mode . aggressive-indent-mode)
    :config
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode))
#+end_src
** Apheleia
Apheleia will format programming code using code formatters such as Black for Python. The main difference between using Apheleia over formatters like Black is that Apheleia will format the code asynchronously in the background without disturbing your cursor position in the buffer making a more streamlined experience that is more pleasant for editing and saving repeatedly as I often do.
#+begin_src emacs-lisp :tangle yes
  (use-package apheleia
    :straight t
    :hook
    (prog-mode . apheleia-mode)
    (tex-mode . apheleia-mode)
    :config
    (setf (alist-get 'black apheleia-formatters)
    '("black" "--experimental-string-processing" "-")))
#+end_src
** C
I have added .ino files to C mode so that I can have syntax highlighting when I program my Arduino board.
#+begin_src emacs-lisp :tangle yes
  (use-package c-mode
    :defer t
    :mode ("\\.c\\'"
           "\\.ino\\'"))
#+end_src
** Elpy
Add powerful features for Python progamming in Emacs.
#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package elpy
    :straight t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :custom
    (elpy-rpc-python-command "python3")
    (python-shell-interpreter "ipython3")
    (python-shell-interpreter-args "-i --simple-prompt")
    :config
    <<elpy_config>>) 
#+end_src
*** Use Flycheck for Python Syntax
Check python syntax while writing with flycheck
#+begin_src emacs-lisp :noweb-ref elpy_config
  (when (load "flycheck" t t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src
** Flycheck
Install flycheck mode so that python syntax can be checed while typing.
#+begin_src emacs-lisp :tangle yes
  (use-package flycheck
    :straight t
    :defer t)
#+end_src
** Go
#+begin_src emacs-lisp :tangle yes
  (use-package go-mode
    :straight t
    :defer t)
#+end_src
** Magit
Magit provides an interface to Git through Emacs. It is very helpful to be able to command Git with Magit as it requires much less context switching since I do not need to save code and then switch to a terminal to run Git commands.
#+begin_src emacs-lisp :tangle yes
  (use-package magit
    :if (executable-find "git")
    :straight t
    :bind ("C-x g" . magit-status))
#+end_src
** Numpydoc
Using Numpydoc provides an interactive tool to automatically generate Numpy style docstrings.
#+begin_src emacs-lisp :tangle yes
  (use-package numpydoc
    :straight t
    :bind (:map python-mode-map
                ("C-c C-n" . numpydoc-generate)))
#+end_src
** Paren Mode
Paren Mode will highlight matching parentheses in programming mode buffers making it easy to determine if delimiters have been matched and what nested-level code is being written in.

The following code will always highlight matching parenthesis when coding /immediately/ without delay. A hook was added to defer loading the package until a programming mode:
#+begin_src emacs-lisp :tangle yes  
  (use-package paren
    :delight
    :defer t
    :custom
    (show-paren-delay 0)
    :hook (prog-mode . show-paren-mode))
#+end_src
** Projectile
#+begin_src emacs-lisp :tangle yes
  (use-package projectile
    :straight t
    :delight t
    :config
    (projectile-mode +1)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))
#+end_src
* Consult
Consult provides a number of highly useful commands. The complete list of commands can be found at https://github.com/minad/consult#available-commands.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package consult
    :straight t
    :bind (("C-c h" . consult-history)
           ("C-c m" . consult-mode-command)
           ("C-c k" . consult-kmacro)
           ("C-x M-:" . consult-complex-command)
           ("C-x b" . consult-buffer)
           ("C-x 4 b" . consult-buffer-other-window)
           ("C-x 5 b" . consult-buffer-other-frame)
           ("C-x r b" . consult-bookmark)
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)
           ("C-M-#" . consult-register)
           ("M-y" . consult-yank-pop)
           ("<help> a" . consult-apropos)
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)
           ("M-g g" . consult-goto-line)
           ("M-g M-g" . consult-goto-line)
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ("M-s d" . consult-find)
           ("M-s D" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)
           ("M-s e" . consult-isearch-history)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi))
    :config
    <<consult_config>>)
#+end_src
** Use Consult to Select xref Locations
Use Consult to search through and select xref locations in buffers
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (xref-show-xrefs-function #'consult-xref)
  (xref-show-definitions-function #'consult-xref)
#+end_src
** Enhanced ~completing-read~ Function
Replace the default Emacs ~completing-read~ function with the enhanced ~consult-completing-read-multiple~.
#+begin_src emacs-lisp :noweb-ref emacs_config
  (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)
#+end_src
** Change Register Preview to Consult
Change the default Emacs ~register-preview-function~ to use consult effectively.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (register-preview-function #'consult-register-format)
#+end_src
** Tweak Register Preview Window
The following line makes the register preview window look better by adding sorting and thin lines to break up the results into easy to view categories.
#+begin_src emacs-lisp :noweb-ref emacs_config
    (advice-add #'register-preview :override #'consult-register-window)
#+end_src
** Set the Narrowing Key
The narrowing key is pressed before a key used to narrow the results returned from consult. An example would be ~< m~ to list bookmarks after calling ~consult-buffer~.
#+begin_src emacs-lisp :noweb-ref consult_config
  (setq consult-narrow-key "<")
#+end_src
** Set Root Function for Projects
Use the built-in project function to find the root of any project. Projectile can also be used but I have yet to compare the differences between the two projects to make a decision as to which one to use.
#+begin_src emacs-lisp :noweb-ref consult_config
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
#+end_src 
* BBDB
The Insidious Big Brother DataBase (BBDB) is used to store contact information in Emacs and interfaces with many other Emacs packages such as Gnus and Org-mode.
#+begin_src emacs-lisp :tangle yes
  (use-package bbdb
    :straight t
    :defer t
    :hook
    (gnus-summary-mode . (lambda ()
                           (define-key gnus-summary-mode-map (kbd ";") 'bbdb-mua-edit-field)))
    :custom
    (bbdb-file "~/Dropbox/bbdb")
    (bbdb-use-pop-up 'horiz)
    (bbdb-mua-update-interactive-p '(query . create))
    (bbdb-message-all-addresses t)
    :config
    (bbdb-mua-auto-update-init 'gnus 'message))
#+end_src
* Delight
Delight provides a means to hide mode names from the mode line. After a lot of customization of Emacs, the mode line can get very crowded with minor modes that are always on and it is not necessary to be reminded that they are active. Also, too many minor modes hides my nyan cat :(.
#+begin_src emacs-lisp :tangle yes
  (use-package delight
    :straight t)
#+end_src
* Deft
Deft is an Emacs package that makes it easier to make quick notes that can be easily searched later. Deft allows for searching the full text of notes and the search results get narrowed down as you
#+begin_src emacs-lisp :tangle yes
  (use-package deft
    :after org
    :defer t
    :bind
    ("C-c n d" . deft)
    :commands (deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/Dropbox/org-roam/")
    (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
    (deft-use-filename-as-title t))
#+end_src
* Dired
The following customizations make emacs dired mode behave in a similar fashion to other file browsing tools such as midnight commander. While there are many great file management tools out there. I keep coming back to emacs dired because of the keyboard commands and flexibility.
** Move/Rename/Copy Files to Another Pane
This will cause emacs to default to moving/copying/renaming files from the directory in one dired buffer to another in a split-window. This will allow emacs to operate more like midnight commander, total commander, double commander, etc.
 #+begin_src emacs-lisp :noweb-ref emacs_custom
   (dired-dwim-target t)
 #+end_src
** Sunrise Commander
#+begin_src emacs-lisp :tangle yes
  (use-package sunrise-commander
    :defer t
    :straight t)
#+end_src
* Docker
This section contains customization for managing the Docker containers on my home server.
** Manage Docker Containers
An interface in Emacs to manage Docker containers.
#+begin_src emacs-lisp :tangle yes
  (use-package docker
    :if (executable-find "docker")
    :straight t
    :bind ("C-c d" . docker))
#+end_src
** Docker Compose
Major mode for editing Docker Compose files.
#+begin_src emacs-lisp :tangle yes
  (use-package docker-compose-mode
    :defer t
    :straight t)
#+end_src
* Eshell
Eshell is a very powerful lisp-based shell that I have learned to love most because you can redirect output directly to Emacs buffers. This feature has made it my default shell and I have switched to it from using mostly Z shell because I send stuff to and from Emacs buffers. This feature really is a game changer. 
** Set up Eshell
Get Eshell configuration set up.
#+begin_src emacs-lisp :tangle yes :noweb no-export
   (use-package eshell
     :defer t
     :hook
     <<eshell_prompt>>
     (eshell-mode . (lambda ()
                      <<eshell_visual_commands>>
                      <<eshell_aliases>>))
     :custom
     (eshell-error-if-no-glob t)
     (eshell-hist-ignoredups t)
     (eshell-save-history-on-exit t)
     (eshell-destroy-buffer-when-process-dies t)
     :config
     <<eshell_config>>
     (setenv "PAGER" "cat"))
  #+end_src
** Eshell Aliases
Below are a list of command-line aliases for use in eshell.
#+name: eshell_aliases
#+begin_src emacs-lisp :noweb-ref eshell_aliases
  (eshell/alias "ff" "find-file $1")
  (eshell/alias "emacs" "find-file $1")
  (eshell/alias "untar" "tar -zxvf")
  (eshell/alias "cpv" "rsync -ah --info=progress2")
  (eshell/alias "ll" "ls -Alh")
#+end_src
** Eshell Prompt
Create a custom prompt for eshell that shows some more information.
#+begin_src emacs-lisp :tangle yes
  (use-package eshell-git-prompt
    :straight (emacs-git-prompt :host github
                                :repo "tfree87/eshell-git-prompt"
                                :branch "master")
    :defer t)
#+end_src
*** Set the Eshell prompt on load
#+begin_src emacs-lisp :noweb-ref eshell_prompt
  (eshell-load . (lambda ()
                        (eshell-git-prompt-use-theme 'multiline2)))
#+end_src
** Eshell Toggle
#+begin_src emacs-lisp :tangle yes
  (use-package eshell-toggle
    :straight (eshell-toggle :repo "4DA/eshell-toggle"
                             :host github
                             :repo "master")
    :custom
    (eshell-toggle-size-fraction 3)
    ;; (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil)
    (eshell-toggle-init-function #'eshell-toggle-init-eshell)
    :bind
    ("M-s-`" . eshell-toggle))
#+end_src
** Eshell Visual Commands
Many commands when run in eshell turn into a mess as it is not an ansi-term. Any interactive commands that need the full ansi-term to display properly are listed below so that when they are run from the eshell they will open in ansi-tem and display properly.
#+name: eshell_visual_commands
#+begin_src emacs-lisp
  (add-to-list 'eshell-visual-commands "htop")
  (add-to-list 'eshell-visual-commands "ipython")
  (add-to-list 'eshell-visual-commands "rclone")
  (add-to-list 'eshell-visual-commands "ssh")
  (add-to-list 'eshell-visual-commands "tail")
  (add-to-list 'eshell-visual-commands "top")
#+end_src
* Flyspell-mode
Flyspell mode can be hooked to various buffer modes so that spell-checking can be done as typing occurs. As you type, a red wavy line will appear under text that it deems to be incorrectly spelled.

I have this mode disabled if Emacs is run as a portable app as this will not work on another Windows system without the spell check libraries installed.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package flyspell
    :if (not <<portable_check>>)
    :delight t
    :defer t
    :config
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode))
#+end_src
* Gnus
See the =~/gnus.el= file for configuration information.
#+begin_src emacs-lisp :tangle yes
  (use-package gnus
    :defer t
    :custom
    (gnus-init-file "~/.emacs.d/gnus.el"))
#+end_src
* Gnuplot-mode
Gnuplot mode can be used for editing files that are used to define a plot style and layout and allow for execution of the code in an Emacs buffer.
#+begin_src emacs-lisp :tangle yes
  (use-package gnuplot
    :if (executable-find "gnuplot")
    :straight t
    :defer t)

  (use-package gnuplot-mode
    :straight t
    :defer t)
#+end_src
* Ibuffer
A better buffer list than the default.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package ibuffer
    :bind
    ("C-x C-b" . ibuffer)
    :hook
    ;; Start ibuffer with default groupings
    (ibuffer-mode .  (lambda ()
                            (ibuffer-switch-to-saved-filter-groups "default")))
    :custom
    <<ibuffer_custom>>)
#+end_src
** Group Buffers
Ibuffer makes it possible to sort buffers in the buffer list into groupings. This makes is a lot faster for me to find a particular buffer that I want to switch to.
#+begin_src emacs-lisp :noweb-ref ibuffer_custom
  (ibuffer-saved-filter-groups
        (quote (("default"
                 ("Dired" (mode . dired-mode))
                 ("Emacs" (or
                           (name . "^\\*scratch\\*$")            
                           (name . "^\\*Messages\\*$")
                           (name . "^\\*GNU Emacs\\*$")
                           (name . "^\\*Help\\*$")
                           (name . "^\\*Calendar\\*$")
                           (name . "^\\*Calculator\\*$")
                           (name . "^\\*Calc Trail\\*$")
                           (name . "^\\*Completions\\*$")))
                 ("Gnus" (or
                          (mode . message-mode)
                          (mode . bbdb-mode)
                          (mode . mail-mode)
                          (mode . gnus-group-mode)
                          (mode . gnus-summary-mode)
                          (mode . gnus-article-mode)
                          (name . "^\\.bbdb$")
                          (name . "^\\.newsrc-dribble")))
                 ("Org"   (or
                           (mode . org-mode)
                           (name . "^\\*Org Agenda\\*$")))
                 ("Shell"   (or
                             (mode . eshell)
                             (mode . term)
                             (mode . shell)))))))
#+end_src
* LaTeX
This section contains modifications to buffers with TeX and LaTeX major modes.
** AUCTeX
Use AUCTEX for writing documents using LaTeX.
#+begin_src emacs-lisp :tangle yes
  (use-package auctex
    :straight t
    :defer t
    :custom
    (TeX-auto-save t)
    (TeX-parse-self t)
    (TeX-master nil))
#+end_src
** Use BibLaTeX
BibLaTeX has more powerful features than standard BibTeX.
#+begin_src emacs-lisp :tangle yes
(setq bibtex-dialect 'biblatex)
#+end_src
* Ledger
To conduct plain-text accounting in Emacs, ~ledger-mode~ needs to be installed from the package repositories. This mode will create faces for the text and highlight transactions while also providing the functionality to execute ledger reports in an Emacs buffer. No shell needed.
#+begin_src emacs-lisp :tangle yes
  (use-package ledger-mode
    :straight t
    :defer t)
#+end_src
* Markdown Mode
Add a mode to edit and view markdown files. While I prefer Org-mode for rich-text editing in Emacs, Github primarily supports markdown so I want to be able to edit and view these files when needed.
#+begin_src emacs-lisp :tangle yes
  (use-package markdown-mode
    :straight t
    :mode ("\\.\\(m\\(ark\\)?down\\|md\\)$" . markdown-mode)
    :config
    (bind-key "A-b" (surround-text-with "+*") markdown-mode-map)
    (bind-key "s-b" (surround-text-with "**") markdown-mode-map)
    (bind-key "A-i" (surround-text-with "*") markdown-mode-map)
    (bind-key "s-i" (surround-text-with "*") markdown-mode-map)
    (bind-key "A-=" (surround-text-with "`") markdown-mode-map)
    (bind-key "s-=" (surround-text-with "`") markdown-mode-map))
#+end_src
* Multiple Cursors
Multiple cursors allows for editing Emacs buffers at multiple locations simultaneously at the same time and has transformed how I use Emacs dired. I can use it to edit many file names at once in a directory by making any dired buffer editable by pressing =C-x C-q=.
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :straight t
    :defer t
    :bind
    ("C-S-c C-S-c" . 'mc/edit-lines)
    ("C->" . 'mc/mark-next-like-this)
    ("C-<" . 'mc/mark-previous-like-this)
    ("C-c C-<" . 'mc/mark-all-like-this))
#+end_src
* Org-mode
~org-mode~ is the powerful task management, calendar, agenda, publishing system, and code documentation tool all-in-one that really extends the power of Emacs. I use ~org-mode~ for the following:
- Organizing my tasks and projects similar to David Allen's "Getting Things Done" method
- Publishing LaTeX documents in a simpler and faster way
- Saving reusable code snippets with documentation that can be executed from within Emacs as how this file was created.
** Initial Setup
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package org
    :straight t
    :mode (("\\.org$" . org-mode))
    :bind
    ("C-c c" . org-capture)
    ("C-c a" . org-agenda)
    (:map org-mode-map
          ("C-c l" . org-store-link))
    :hook (org-mode . turn-on-flyspell)
    :custom
    <<org_customize>> 
    :config
    <<org_config>>
    <<babel_languages>>)

  (use-package org-contrib
    :straight t
    :after org)
#+end_src
** Org-mode Directories
Set up the default directories for Org Mode.
*** Default Directory
Tell org-mode which directory is the default directory for all org-mode files.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-directory "~/Dropbox/gtd")
#+end_src
*** Location of Agenda Files
Tell org-mode in which directory all the agenda files can be found.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-agenda-files
   `("~/Dropbox/gtd"))
#+end_src
** Filing Notes
*** Default Notes File
I prefer to have all of my captured notes automatically filed into a file called ~inbox.org~. Changing ~org-default-notes-file~ can create this functionality.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-default-notes-file (concat org-directory "/inbox.org"))
#+end_src
*** Refile Targets
**** Set Org Files for Refiling
In order to refile/move tasks from the inbox to other agenda files and subtrees, the following must be set:
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+end_src
**** Allow Refile as Top-level Heading
I want to allow for refiling org-mode tasks at the top of a file. Setting this will also require turning off completing the path in steps if ivy-mode autocompletion is used.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
#+end_src

Setting this variable allows for refiling tasks under a new heading on the fly.
#+begin_src :noweb-ref org_customize
  (org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src
** Exporting
To remove headers labeled with the ~:ignore:~ tag, the following code needs to be implemented:
#+begin_src emacs-lisp :nowweb-ref org_config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines)))
#+end_src
** Task Management Customization
*** Drawer for State Changes
Put changes of TODO states for org-mode into a drawer under each heading so that it does not conflict with content under the headings.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-log-into-drawer t)
#+end_src
*** Custom TODO Keywords
Set up the sequence of org-todo task keywords to allow for delegated(WAITING) tasks and CANCELLED tasks.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-todo-keywords
   '((sequence "TODO(t)"
               "WAITING(w)"
               "|" "DONE(d)"
               "CANCELLED(c)")))
#+end_src
*** Project Tags
I like to mark projects with a tag, however, I do not want my tasks to inherit these tags because I only use the project tags to locate upper-level headings. In addition, almost all of my org-mode tasks fall under some sort of project headline so it becomes meaningless if all of my tasks have the project tag. Changing this setting prevents the tag from being inherited and showing up in the agenda view.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-tags-exclude-from-inheritance '("project"))
#+end_src
*** Stuck Projects
Stuck projects are projects which are going nowhere and need to be analyzed for next steps. Org-mode allows for custom definitions of what a "stuck project" can be so I define a stuck project as any headline with the project keyword which has no TODO item below it. Org-mode by default assumes all level 2 headings are projects which is not the case in my setup.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-stuck-projects
   '("+project/-MAYBE-DONE"
     ("NEXT" "TODO")
     nil
     "\\<IGNORE\\>"))
#+end_src
** BibLaTeX in Org-mode
I prefer BibLaTeX over the standard BibTeX as it has more powerful features and supports more citation styles. In order to get BibLaTeX to operate in org-mode, the ~org-latex-pdf-process~ variable needs to be changed to reflect this.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-latex-pdf-process
   '("pdflatex -interaction nonstopmode -output-directory %o %f"
     "biber %b"
     "pdflatex -interaction nonstopmode -output-directory %o %f"
     "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Org-babel Languages
In order to use active code in org-mode, you must define which programming languages to load. For any programming language you wish to use, it must be added to the ~org-babel-load-languages~ list.
#+name: babel_languages
#+begin_src emacs-lisp
  (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((awk . t)
                                 (calc . t)
                                 (css . t)
                                 (emacs-lisp . t)
                                 (eshell . t)
                                 (gnuplot . t)
                                 (dot . t)
                                 (latex . t)
                                 (ledger . t)
                                 (octave . t)
                                 (plantuml . t)
                                 (R . t)
                                 (sed . t)
                                 (shell . t)))
#+end_src
** Appearance
*** Word Wrapping
I like to wrap lines at the edge of the window because I often use org-mode to compose LaTeX documents. By having the lines truncated at the window edge, I can see the different paragraphs and read the whole text while also not having to deal with the issues of fill-column.
#+begin_src emacs-lisp :noweb-ref org_config
  (add-hook 'org-mode-hook #'toggle-truncate-lines)
#+end_src
*** Single Space Between Headline and Tags
I keep only a single space between the headline because I find it easier to owork with when buffer sizes change or if I am editing with a mobile device. It just seems to make things simpler.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-tags-column 0)
#+end_src
*** Use "Clean View"
Start all Emacs org-mode buffers with "clean-view" turned on. This makes it easier to see and read org-mode files as all the extra asterisks in the headings wil be hidden leading to more empty white space and a cleaner look.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-startup-indented t)
#+end_src
*** Native Tabs
This will allow for source code blocks in emacs org-mode to be internally indented as they would normally be in their majors modes.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-src-tab-acts-natively t)
 #+end_src
*** Change TODO Keyword Colors
Change the color of the org-todo keywords to make it easier to see them on a color screen and distinguish between them.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-todo-keyword-faces
   '(("TODO" . org-warning)
     ("WAITING" . "yellow")
     ("CANCELED" . (:foreground "blue" :weight bold))
     ("DONE" . org-done)))
#+end_src
*** Change Bullets to Look Like Spacemacs
I was envious of the org-mode look in Spacemacs and discovered that the bullets that are used in Spacemacs can be achieved by using the ~org-bullets~ package and leaving it on the default settings.
#+begin_src emacs-lisp :tangle yes
  (use-package org-bullets
    :if window-system
    :straight t
    :after org
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src
** Calfw
~calfw~ provides a grid-based calendar view similar to what is seen in most graphical calendar programs but integrates the org agenda files. I use the fork from @zemaye as this version has fixed the issue in ~calfw-org.el~ where events that span multiple dates show up repeated on the display.
#+begin_src emacs-lisp :tangle yes
  (use-package calfw
    :straight (emacs-calfw :host github
                           :repo "zemaye/emacs-calfw"
                           :branch "master")
    :commands (cfw:open-calendar-buffer)
    :init
    (defalias 'calfw 'cfw:open-calendar-buffer)
    :custom
    (cfw:fchar-junction ?╋)
    (cfw:fchar-vertical-line ?┃)
    (cfw:fchar-horizontal-line ?━)
    (cfw:fchar-left-junction ?┣)
    (cfw:fchar-right-junction ?┫)
    (cfw:fchar-top-junction ?┯)
    (cfw:fchar-top-left-corner ?┏)
    (cfw:fchar-top-right-corner ?┓))
#+end_src
*** Use calfw-org
Use ~calfw-org~ to display org-mode events in the ~calfw~ calendar. I don't like the long command ~M-x cfw:open-org-calendar~ so I have shortened to it to ~M-x calfworg~ which is much easier to type and remember.
#+begin_src emacs-lisp :tangle yes
  (use-package calfw-org
    :straight (emacs-calfw :host github
                           :repo "zemaye/emacs-calfw"
                           :branch "master")
    :commands (cfw:open-org-calendar)
    :init
    (defalias 'calfworg 'cfw:open-org-calendar))
#+end_src
** Org-agenda
Defer loading ~org-agenda~ until it is called by =C-c a= to speed up Emacs loading time. I also prefer to have the current day at the beginning of the week so all current items are at the top of the agenda and I can look 6 days into the future.
#+begin_src emacs-lisp :tangle yes
  (use-package org-agenda
      :ensure nil
      :after org
      :custom
      (org-agenda-start-on-weekday nil))
  #+end_src
** Org-capture
Set up templates for making capturing tasks with ~org-capture~ easier.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package org-capture
    :ensure nil
    :after org
    :custom
    <<org_capture_templates>>)
#+end_src
*** Org-capture Templates
Org-capture templates make creating org-mode notes quicker and easier from any buffer using a standard template for each not type.
#+name: org_capture_templates
#+begin_src emacs-lisp 
  (org-capture-templates
   '(("p" "Projects item" entry (file "~/Dropbox/gtd/projects.org")
      "* %? :project:")
     ("s" "Someday/Maybe item" entry (file "~/Dropbox/gtd/someday.org")
      "* %?\n%x")
     ("T" "Tickler file item" entry (file "~/Dropbox/gtd/tickler.org")
      "* %?\n%^{Scheduled}t\n%x")
     ("t" "To Do Item" entry (file+headline "~/Dropbox/gtd/inbox.org" "Tasks")
      "* TODO %? %^G\nSCHEDULED: %^{Scheduled}t DEADLINE: %^{Deadline}t\n%x")))
#+end_src
** Org-download
I have not yet tried this feature yet...
#+begin_src emacs-lisp :tangle yes
(use-package org-download
  :after org
  :bind
  (:map org-mode-map
        (("s-Y" . org-download-screenshot)
         ("s-y" . org-download-yank))))
#+end_src
** Org-mind-map
Turn any ~org-mode~ buffer into a mind map in various output formats.
#+begin_src emacs-lisp :tangle yes
  (use-package org-mind-map
    :straight t
    :after org
    :commands org-mind-map-write
    :init
    (require 'ox-org)
    :custom
    (org-mind-map-engine "dot"))
#+end_src
** Org-ref
A reference manager in org-mode.
#+begin_src emacs-lisp :tangle yes
  (use-package org-ref
    :straight t
    :defer t
    :after org)
#+end_src
** Org-roam
~org-roam~ adds features to make linking org notes easier and provided a database file to connect all the notes together.
#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :straight t
    :defer t
    :after org
    :init
    (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename "~/Dropbox/org-roam"))
    :config
    (org-roam-setup)
    :custom
    (org-roam-dailies-directory "daily/")
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :target (file+head "${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :target (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n g" . org-roam-graph)
     ("C-c n r" . org-roam-node-random)		    
     (:map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n o" . org-id-get-create)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n l" . org-roam-buffer-toggle)))))
#+end_src
* PDF Tools
PDF Tools is a faster and more feature-rich than the built in DocView.
#+begin_src emacs-lisp :tangle yes
  (use-package pdf-tools
    :straight t
    :magic ("%PDF" . pdf-view-mode)
    :config
    (pdf-loader-install :no-query))
#+end_src
* PlantUML
PlantUML is a language that can interpret code to create flowcharts and UML diagrams. The syntax is similar to programming languages thereby making it fast and easy to create accurate, auto-generated charts that don't require a lot of dragging boxes around as you might with a graphical tool such as LibreOffice Draw.
** Set Location of PlantUML Binary
When Emacs is run as a portable app on a USB drive, Emacs needs to know the location of the PlantUML executable which I place in the .emacs.d directory.
#+begin_src emacs-lisp :noweb-ref org_customize
  (org-plantuml-jar-path (expand-file-name "~/.emacs.d/plantuml/plantuml.jar"))
#+end_src
** Install PlantUML Mode
PlantUML mode is not installed by default, so we need ~use-package~ to download and install it.
#+begin_src emacs-lisp :tangle yes
  (use-package plantuml-mode
    :straight t
    :defer t
    :after org)
#+end_src
* Popper
#+begin_src emacs-lisp :tangle yes
  (use-package popper
    :straight t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Embark Actions\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src
* Treemacs
#+begin_src emacs-lisp :tangle yes
  (use-package treemacs
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (treemacs-load-theme "all-the-icons")
    (progn
      (setq treemacs-show-hidden-files               t
            treemacs-wide-toggle-width               60
            treemacs-width                           30
            treemacs-width-is-initially-locked       nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      (treemacs-resize-icons 22)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-all-the-icons
    :after treemacs
    :straight t
    :config (treemacs-load-theme 'all-the-icons))

  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)
#+end_src
* Centaur Tabs
I like having tabs for all of my open buffers. The following code turns on tabs using a nicer interface than the built-in ~tab-line-mode~:
#+begin_src emacs-lisp :tangle yes
  (use-package centaur-tabs
    :if window-system
    :straight t
    :defer t
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    :custom
    (centaur-tabs-set-bar 'over)
    (centaur-tabs-style "chamfer")
    :config
    (centaur-tabs-mode t))
#+end_src
This setting can always be toggled off if a "cleaner" Emacs view is desired.
* Tramp
I occasinally use Tramp to access remote files but it seems to have problems when the default shell is set to zsh. Setting it so bash has fixed this issue for me.
#+begin_src emacs-lisp :tangle yes
  (use-package tramp
    :defer t
    :config
    (eval-after-load 'tramp '(setenv "SHELL" "/bin/bash")))
#+end_src
* Which-key
Which-key provides a pop-up menu when there is a pause in the minibuffer or if executed directly to show the keyboard commands available to the current buffer.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  (use-package which-key
    :straight t
    :defer 3
    :delight
    :custom
    <<wk_custom>>
    :config
    <<wk_config>>
    (which-key-mode))
#+end_src
** Activating Which-key
How to start which-key
*** C-h During Key Combination Entry
Type C-h during any key combination to pop-up which key
#+begin_src emacs-lisp :noweb-ref wk_custom
  (which-key-show-early-on-C-h t)
#+end_src
*** Press <f4> in Any Mode
Use the <f4> key in any major mode to see the key bindings
#+begin_src emacs-lisp :noweb-ref wk_config
  (global-set-key (kbd "<f4>") 'which-key-show-major-mode)
#+end_src
** Which-key Window Location
Set up which-key to use the side window preferably
#+begin_src emacs-lisp :noweb-ref wk_config
  (which-key-setup-side-window-right-bottom)
#+end_src
* YASnippet
YASnippet is a system that povides easy access to many templates that can be inserted into buffers based on their major mode.
** Install YASnippet
YASnippet takes a small bit of text or an abbreviation and expands it into a template once the ~<TAB>~ key has been pressed. This is very useful for typing sections of text that are repeated often such as creating the =#+begin_src emacs-lisp :tangle yes= blocks in this Org-mode file such as the one below.
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :straight t
    :delight t
    :defer 3
    :config
    (yas-global-mode 1))
#+end_src
** Install Snippets
The package YASnippet Snippets loads many pre-defined templates for YASnippet. This is very useful as many of the best use cases for YASnippet are already included in this package making reducing the need to create individual custom templates.
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet-snippets
    :straight t
    :defer t)
#+end_src
* Minimap
Minimap shows a smaller window next to the main window where an overview of the whole buffer is presented and displays where the active region relates to the overall structure.
#+begin_src emacs-lisp :tangle yes
  (use-package minimap
    :straight t
    :defer t)
#+end_src
* Rainbow Delimiters
Rainbow delimiters colors delimiters such as brackets and parentheses in source code making it easier to identify which delimiters are paired up. This can be a quick and easy way to check to see if all open delimiters are closed off without having to rely entirely on ~paren-mode~ and ~backward-sexp~.
#+begin_src emacs-lisp :tangle yes
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
* Oh My Eshell
Something I am fiddling around with...
#+begin_src emacs-lisp :tangle yes
 ;; (load-file"~/.emacs.d/elisp/oh-my-esh.el")
#+end_src
* Start Emacs Server
Running Emacs as a server means that if I create a new instance of Emacs with the command ~emacs~, I can then use the command ~emacsclient -c -n~ in order to quickly open a new Emacs buffer that is part of the same Emacs session.

I have this option run only when I am not executing Emacs as a portable app as it is unlikely that there will be Emacs installed on the system that I am running Emacs on when I am using it portably.
#+begin_src emacs-lisp :tangle yes :noweb no-export
  ;; Start an Emacs server

  (when (not <<portable_check>>)
    (server-start))
#+end_src
* Performance Optimization End
Reset the value for Emacs garbage collection from the beginning of the init file and close off the ~let~ statement at the beginning of the init file.
#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold (* 2 1000 1000))
  )
#+end_src
