# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title: Emacs Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2024-10-31 21:11:39 thomas>
#+description: This org-mode file contains an org-babel implementation of the .emacs or .emacs.d/init.el file.
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil 
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: index.html
#+html_link_up: index.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)

#+SETUPFILE: https://tfree87.github.io/org-html-themes/org/theme-readtheorg.setup
-----


Welcome to my Emacs configuration! This file contains the code along with documentation for customizing my Emacs with all the options that I prefer to use by default.

* About this Document

This file was written using Emacs Org Mode. This makes navigating and modifying my Emacs configuration much simpler as I can place different elements of my configuration under separate headings. The code in this file is placed in source code blocks that are tangled to the ~init.el~ file that Emacs will look for upon starting. When this file is saved, the source code blocks that are marked for tangling will write their contents to ~init.el~.

** Tags

Tags are used in this document to help make navigation of the packages easier and to provide additional information about piecing together this Emacs configuration. Below are descriptions of the tags and their meanings:

- deprecated :: This package has been "deprecated" in favor of another package that better integrates with this Emacs configuration or produces a better workflow.
- disabled :: Any package marked with this tag has been disabled due to it causing issues or the package was deprecated.
- GUIX :: Packages managed by GUIX are marked with this tag. There are a number of reasons why a package might be managed by GUIX over using package managers in Emacs:
    
  1. The package requires compilation on the host system (e.g. Pdf Tools and Org-roam). Using the GUIX package manager will manage the compilation automatically. Also, packages that need to be compiled are difficult to run on portable Emacs so they will be left out when Emacs is used as a portable app.
  2. The package is only run on a Linux System with GUIX installed or on the GUIX System Distribution so there is no need to have Emacs manage this package.
  3. The package relies on another program installed on the host system (e.g. Mu4e requires Mu).

- testing :: A package or function that is added and is being tested for use is marked with this tag.
- Windows  :: Customizations exclusively for the use on the Windows operating system are marked with this tag.

* Header for ~init.el~

The following code block will add a header to the ~init.el~ file when it is generated on saving:

#+begin_src emacs-lisp :tangle yes
  ;;; init.el --- Emacs initialization file -*- lexical-binding: t -*-

  ;; Copyright (C) 2022-2024 Thomas Freeman

  ;; Author: Thomas Freeman
  ;; Maintainer: Thomas Freeman
  ;; Keywords: lisp
  ;; Version: 0.0.1
  ;; Created: 09 Jan 2022

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary:

  ;; This file is an init file for Emacs.
  ;;
  ;; This file is NOT a part of Emacs.
  ;;
  ;; This file IS NOT intended to be edited! It was generated by init.org.

  ;;; URL: https://github.com/tfree87/.emacs.d

  ;; For documentation and for editing this file, see the init.org in the
  ;; github repository tfree87/.emacs.d
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;;; Code:
#+end_src

* Performance Optimization Start

In order to slightly reduce the load time for Emacs, the whole ~init.el~ file can be wrapped in the following let statement to speed up the load process. This can help a little when Emacs is run as a portable app from a flash drive as I often do.See [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][this Reddit post]] for more information.

#+begin_src emacs-lisp :tangle yes :comments both
  (let ((file-name-handler-alist nil))
#+end_src

* Load Path

Since all of the Emacs configuration is in modules, the ~modules~ directory and all of its sub-directories must be added to the Emacs ~load-path~.

#+begin_src emacs-lisp :tangle yes :comments both
  (let ((default-directory "~/.emacs.d/modules/"))
    (normal-top-level-add-subdirs-to-load-path))
#+end_src

* Running Emacs as a Portable App

I like to use Emacs at work and at home to boost my productivity, but I often find when I am at work or using another computer using Windows and I cannot always install Emacs to the host system. In this case, I run Emacs from a USB thumb drive so that I can still have access to the power of Emacs even when I am not working on my home personal computer. Running Emacs from a thumb drive has some caveats. For instance, if you are running Emacs from a thumb drive on a work computer and you do not have administrator access, then a lot of features will break. This section contains code that can be used to run Emacs.

** Check for Portable Emacs Instance

When [[file:runemacs.bat][runemacs.bat]] is executed, it will set the environment variable ~EMACS_PORTABLE~ to "Y". By checking for this, we can tell that Emacs that it was executed to be run from a flash drive.

#+begin_src emacs-lisp :tangle yes :comments both
  (defun freemacs/isportable-p ()
    "A function to check whether Emacs was executed as a portable application in Windows by the runemacs.bat script."
    (string= (getenv "EMACS_PORTABLE") "Y"))
 #+end_src
 
** Set Location of Portable Git

Straight.el cannot operate without access to Git. Luckily, there is a portable version of Git ([[https://github.com/sheabunge/GitPortable][sheabunge/GitPortable]]) for Windows that can be installed on the [[https://portableapps.com/][PortableApp]] platform to provide access to Git without having it installed on the host system. After downloading GitPortable, we need to tell Emacs where it can find the binary executable so that Emacs programs can call Git when needed.

The following line code will check to see if Emacs is being run as a portable app and, if it is, then add the path where git.exe can be found to the ~exec-path~ list:

 #+begin_src emacs-lisp :tangle yes :noweb yes :comments both
   (when (freemacs/isportable-p)
     (add-to-list 'exec-path "~/PortableApps/GitPortable/App/Git/bin"))
 #+end_src

* Custom Set Variables

 To keep variables set by the customize interfacei from being placed at the top of ~init.el~, Set Emacs customize to be put into a separate file [[./custom.el]].

#+begin_src emacs-lisp :tangle yes :comments both
  (setq custom-file "~/.emacs.d/custom.el")
#+end_src

Load the custom file. This needs to be done early in the loading process because it contains the addresses for the package repositories. If this is not loaded before refreshing packages and making calls to ~use-package~, then the ~:ensure~ command will not be able to pull the packages and install them.

#+begin_src emacs-lisp :tangle yes :comments both
  (load custom-file)
#+end_src

* Straight.el

Instead of the built-in package manager, use [[https://github.com/raxod502/straight.el][straight.el]] to pull all the packages straight from their repositories.

1. It is easier to avoid conflicts with different package repositories such as duplicates packages in ELPA and MELPA.
2. I can define a specific fork to use for a specific package to get bug fixes or modifications.
3. The entire package repository is cloned, which, while it takes up a lot of space, allows for editing the source code directly if desired.
4. Github repositories that are not included in ELPA, MELPA, or marmalade can be pulled 
 used in ~use-package~ statements.

#+begin_src emacs-lisp :tangle yes :comments both
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
 #+end_src
 
* Install use-package

Use ~straight.el~ to install ~use-package~ to manage Emacs packages.

#+begin_src emacs-lisp :tangle yes :comments both
  (straight-use-package 'use-package)
#+end_src

Set Straight to be configured the default manager for ~use-package~~.

#+begin_src emacs-lisp :tangle no :comments both
  (setq straight-use-package-by-default t)
#+end_src

* Benchmark Init

Use benchmark-init to check the time that it takes to load Emacs. This helps to diagnose which packages and configurations are causing Emacs to load slowly.

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-benchmark-init)
#+END_SRC

* No-littering

The [[https://github.com/emacscollective/no-littering][no-littering]] package will put Emacs configuration files for many third-party packages into separate folders under ~.emacs.d/etc/~ to help keep the ~.emacs.d/~ from getting to cluttered with different configuration files. This needs to be run before the other packages are initialized in order to ensure that when the pacakges are loaded that their configuration files will be put into the correct location.

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-no-littering)
#+end_src

* Whicher

Load the [[./modules/startup/freemacs-whicher.org][Whicher module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-whicher)
#+end_src

* Emacs Defaults

Changes to the default settings of Emacs  Load the  the [[file:modules/defaults/freemacs-defaults.org][defaults module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-defaults)
#+end_src

* Coding

Load the [[file:modules/coding/freemacs-coding.org][coding module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-project)

  (require 'freemacs-coding)

  (require 'freemacs-autohotkey)
#+end_src

* Completion

Load the [[file:modules/completion/freemacs-completion.org][completion module]]

#+begin_src emacs-lisp :tangle yes :comments both
    (require 'freemacs-completion)
#+end_src

* Corfu Configuration

Load the Cofu module (see [[./modules/completion/freemacs-corfu.el][freemacs-corfu]]).

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-corfu)
#+end_src

* Docker

Load the he [[file:modules/docker/freemacs-docker.org][docker module]]. It configures the following packages:

+ Docker :: Manage Docker containers from within Emacs
+ Docker Compose  :: Edit docker-compose files in Emacs

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-docker)
#+end_src

* YASnippet

Load the [[./modules/editing/freemacs-yasnippet.org][YASnippet module]].

#+begin_src emacs-lisp :tangle yes
  (require 'freemacs-yasnippet)
#+end_src

* Elfeed

Load the [[./modules/elfeed/freemacs-elfeed.org][Elfeed Module]].

#+begin_src emacs-lisp :tangle yes
  (require 'freemacs-elfeed)
#+end_src

* Dired

Load the [[file:modules/file-tools/freemacs-dired.org][Dired module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-dired)
#+end_src

* Trashed

Load the [[./modules/file-tools/freemacs-trashed.org][Trashed Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-trashed)
#+end_src

* Dirvish

Load the [[./modules/file-tools/freemacs-dired.org][Dirvish Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-dirvish)
#+end_src

* Graphing

Emacs can be used as an environment to create graphs, plots, and diagrams. Configuration for these are found in the [[file:modules/graphing/freemacs-graphing.org][graphing module]].

+ Gnuplot :: Create plots using Gnuplot in Emacs
+ PlantUML :: Create UML diagrams with PlantUML 

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-graphing)
#+end_src

* Ledger

Load the [[file:modules/math/freemacs-ledger.org][Ledger module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-ledger)
#+end_src

* Meow Mode

Load the [[./modules/editing/freemacs-meow.org][Meow Mode module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-meow)
#+end_src
* Org

Load the [[./modules/org/freemacs-org.org][Org Mode module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-org)
#+end_src

*  Org Contacts

Load the [[./modules/org/freemacs-org-contacts.org][Org Contacts Module]].
#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-org-contacts)
#+end_src

* Org Mind Map

Load the [[./modules/org/freemacs-org-mm.org][Org Mind Map module]]/

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-org-mm)
#+end_src

* Org-QL

Load the [[./modules/org/freemacs-org-ql.org][Org Ql Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-org-ql)
#+end_src

* Org Super Links

#+begin_src emacs-lisp :tangle yes
  (require 'freemacs-orgsl)
#+end_src

* Session

Load the [[./modules/session/freemacs-session.org][Session Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-session)
#+end_src

* Eshell

Load the [[./modules/shells/freemacs-eshell.org][Eshell Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-eshell)
#+end_src

* Eat

Load the [[./modules/shells/freemacs-eat.org][Eat Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-eat)
#+end_src

* VTerm

Load the [[./modules/shells/freemacs-vterm.org][Vterm Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-vterm)
#+end_src

* Theme style

Load the [[./modules/theme/freemacs-theme.org][Theme Module]].

#+begin_src emacs-lisp :tangle yes :comments both
    (require 'freemacs-theme)
#+end_src

* Centered-Window Mode

Load the [[./modules/theme/freemacs-cwm.org][Centered Window module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-cwm)
#+end_src

* Nerd Icons

Load the [[./modules/theme/freemacs-nerd-icons.org][Nerd Icons module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-nerd-icons)
#+end_src

* Academic Writing

The [[file:modules/publishing/freemacs-academic-writing.org][academic writing module]] contains configurations to improve the environment for writing academic papers in Emacs. It contains configuration for the following packages:

+ Academic Phrases :: A package that inserts common template phrases into academic papers
+ Citar :: A citation tool that simplifies adding citations to documents
+ Org Cite :: The built-in Org Mode citation management system

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-academic-writing)
#+end_src

** Spellchecking

The spellchecking module configures the spell checking environment in Emacs. A few of the changes made:

+ Flyspell is on be default so that you do not need to remember to call ~ispell~.
+ Hunspell is used as the default spellchecking backend as it is more modern and works on multiple operating systems.

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-spellcheck)
#+end_src

** \LaTeX{}

Configuration for working with \LaTeX documents can be found in the [[file:modules/publishing/freemacs-latex.org][\LaTeX{} module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-latex)
#+end_src

* Markdown

Load the [[File:modules/publishing/freemacs-markdown.org][Markdown module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-markdown)
#+end_src

* Ox-publish

~ox-publish.el~ makes it easy to create multi-page websites from Org Mode files by defining a publishing project. The configuration for this package can be found in the [[file:modules/publishing/freemacs-ox-publish.org][ox-publish module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-ox-publish)
#+end_src

* PDF

To improve the speed and to extend the ability to view PDF files in Emacs, the [[file:modules/publishing/freemacs-pdf.org][PDF module]] can be loaded.

#+begin_src emacs-lisp :tangle yes :comments both
   (require 'freemacs-pdf)
#+end_src

* Help

The [[file:modules/help/freemacs-help.org][help module]] contains configuration that adds additional tools for help tools in Emacs:

#+begin_src emacs-lisp :tangle yes :comments both
   (require 'freemacs-help)
#+end_src

* YouTube

Load the [[./modules/youtube/freemacs-youtube.org][YouTube Module]].

#+begin_src emacs-lisp :tangle yes :comments both
  (require 'freemacs-youtube)
#+end_src

* Emacs Server

Load the [[file:modules/server/freemacs-server.org][server module]].

#+begin_src emacs-lisp :tangle yes :noweb yes :comments both
  (require 'freemacs-server)
#+end_src

* Custom Functions

This section contains custom functions that I have either created myself or borrowed from others to accomplish small tasks.

#+begin_src emacs-lisp :tangle yes
;; Custom Function Definitions
#+end_src

** Sudo Find File

This function creates a ~sudo-find-file~ command that can be used to open files as the super user. This can be really useful when combined with Embark. This function was copied from https://karthinks.com/software/fifteen-ways-to-use-embark/.

#+begin_src emacs-lisp :tangle yes
  (whicher "sudo")
  (defun sudo-find-file (file)
    "Open FILE as root."
    (interactive "FOpen file as root: ")
    (when (file-writable-p file)
      (user-error "File is user writeable, aborting sudo"))
    (find-file (if (file-remote-p file)
                   (concat "/" (file-remote-p file 'method) ":"
                           (file-remote-p file 'user) "@" (file-remote-p file 'host)
                           "|sudo:root@"
                           (file-remote-p file 'host) ":" (file-remote-p file 'localname))
                 (concat "/sudo:root@localhost:" file))))
#+end_src

* Performance Optimization End

Close off the ~let~ statement at the beginning of the init file.

#+begin_src emacs-lisp :tangle yes
  (setq gc-cons-threshold 800000)
  )
#+end_src

* End

Add a final comment to indicate the end of the file.

#+begin_src emacs-lisp :tangle yes
  (provide 'init)

  ;;; init.el ends here
#+end_src
