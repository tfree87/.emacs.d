# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title: Defaults Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2022-07-07 17:21:29 thomas>
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: ../../index.html
#+html_link_up: ../../init.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)
#+html_head: <style>#org-div-home-and-up { text-align: right; padding-right: 10pt; }</style>

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup



The code below collects customizations for Emacs built-in components.

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package emacs
    :custom
    <<emacs_custom>>
    :config
    <<emacs_config>>)
#+end_src

* Automatic Time Stamps

Emacs supports time stamps in any text buffer where ~Time-stamp: <>~ can be found in the first eight lines. The ~time-stamp~ command can then be used to automatically update the time. A simpler solution, however, is to have Emacs automatically update the time stamp when the buffer is saved.

#+begin_src emacs-lisp :noweb-ref emacs_config
  (add-hook 'before-save-hook 'time-stamp)
#+end_src

* Bidirectional Editing

Emacs supports bidirectional editing. This is rarely used feature for many and can actually result in slower performance. To improve performance if bidirectional editing it not used, the following can be set:

1. Tell Emacs that text should be read from left to right.

   #+begin_src emacs-lisp :noweb-ref emacs_custom
     (bidi-paragraph-direction 'left-to-right)
   #+end_src

2. Turn off bidrectional editing mode.
   
   #+begin_src emacs-lisp :noweb-ref emacs_config
     (if (version<= "27.1" emacs-version)
         (setq bidi-inhibit-bpa t))
    #+end_src
    
* Display Battery Mode

Display Battery Mode will display the battery charge status in the modeline 

#+begin_src emacs-lisp :tangle yes
  (use-package battery
    :config
    (display-battery-mode t))
#+end_src

* Send Deleted Files to System Trash

 Emacs does not send files to the trash by default which is counter-intuitive for many beginning users. /In order to risk losing files it is a good idea to turn on the option to send all files to the system trash./

 #+begin_src emacs-lisp :noweb-ref emacs_custom
   (delete-by-moving-to-trash t)
 #+end_src
 
* Backup Files with Version Control

 Emacs has a built-in version control system in which it will create a series of backup files. This will create a number of backup flies, however, that will need to be cleaned up on a regular basis.


 #+begin_src emacs-lisp :noweb-ref emacs_custom
   (version-control t)
   (delete-old-versions t)
   (vc-make-backup-files t)
 #+end_src
 
* Indent Using Spaces

Indenting with spaces rather than tabs is genrally recommended when working with code. Especially when writing code in Python.

#+begin_src emacs-lisp :noweb-ref emacs_config
  (setq-default indent-tabs-mode nil)
#+end_src

* Inhibit Startup Screen

After seeing the startup screen hundreds of times, there is no longer any need to load it on startup as it no longer contains any new information.

#+begin_src emacs-lisp :noweb-ref emacs_custom
  (inhibit-startup-screen t)
#+end_src

* Register Delay

#+begin_src emacs-lisp :noweb-ref emacs_custom
  (register-preview-delay 0)
#+end_src

* Ring Bell Function

#+begin_src emacs-lisp :noweb-ref emacs_custom
  (ring-bell-function #'ignore)
  (visible-bell t)
#+end_src

* Shorten "Yes or No" to "Y or N"

To make work faster, instead of typing "yes" or "no" for each question prompt, use just "y" or "n"
.

#+begin_src emacs-lisp :noweb-ref emacs_config
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

* Show Column Number

Many programming language style guides recommend that each line of code is less than 80 characters long. To determine if code lines are too long, a simple tool is to activate ~column-number-mode~. Once enabled, the current column (i.e. the number of characters on that line) will be displayed.

#+begin_src emacs-lisp :noweb-ref emacs_custom
  (column-number-mode t)
#+end_src

A better fix would be to use code formatters to prevent lines from getting too long. For example, Apheleia will run formatters such as Black on Python code to keep code lines from becoming too long.

* End

#+begin_src emacs-lisp :tangle yes
  (provide 'freemacs-defaults)

  ;;; freemacs-defaults.el ends here
#+end_src
