# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title: Org Mode Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2022-07-21 20:10:19 thomas>
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil toc:t
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: ../../index.html
#+html_link_up: ../../init.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)
#+html_head: <style>#org-div-home-and-up { text-align: right; padding-right: 10pt; }</style>

#+SETUPFILE: https://tfree87.github.io/org-html-themes/org/theme-readtheorg.setup
-----


This file provides the Org Mode configuration for my personal configuration of Emacs called Freemacs.

#+begin_src emacs-lisp :tangle yes
  ;; Organization/Time Management/Notes Configuration
#+end_src

* Calfw

[[https://github.com/kiwanami/emacs-calfw][Calfw]] provides a grid-based calendar view similar to what is seen in most graphical calendar programs but integrates the org agenda files. I use the fork from @zemaye as this version has fixed the issue in ~calfw-org.el~ where events that span multiple dates show up repeated on the display.

#+begin_src emacs-lisp :tangle yes
  (use-package calfw
    :straight (emacs-calfw :host github
                           :repo "zemaye/emacs-calfw"
                           :branch "master")
    :commands (cfw:open-calendar-buffer)
    :init
    (defalias 'calfw 'cfw:open-calendar-buffer)
    :custom
    (cfw:fchar-junction ?╋)
    (cfw:fchar-vertical-line ?┃)
    (cfw:fchar-horizontal-line ?━)
    (cfw:fchar-left-junction ?┣)
    (cfw:fchar-right-junction ?┫)
    (cfw:fchar-top-junction ?┯)
    (cfw:fchar-top-left-corner ?┏)
    (cfw:fchar-top-right-corner ?┓))
#+end_src

** Calfw Org :org:

~calfw-org.el~  displays org-mode events in the ~calfw~ calendar. I don't like the long command ~M-x cfw:open-org-calendar~ so I have shortened to it to ~M-x calfworg~ which is much easier to type and remember.

#+begin_src emacs-lisp :tangle yes
  (use-package calfw-org
    :straight (emacs-calfw :host github
                           :repo "zemaye/emacs-calfw"
                           :branch "master")
    :commands (cfw:open-org-calendar)
    :init
    (defalias 'calfworg 'cfw:open-org-calendar))
#+end_src

* Habitica :org:

#+begin_src emacs-lisp :tangle yes
  (use-package habitica
    :straight t
    :after org
    :custom
    (habitica-turn-on-highlighting t)
    (habitica-show-streak t))
#+end_src

* Olivetti

Olivetti is a minor mode that can be used to center text in a buffer t make it more pleasant to read. It creates margins that are similar to the large margins you might find in a default class of a LaTeX document. I have found that large margins make reading much more pleasant.

#+begin_src emacs-lisp :tangle yes
  (use-package olivetti
    :straight t
    :hook
    (org-mode . olivetti-mode))
#+end_src

* Org :org:

[[https://orgmode.org/][Org Mode]] is the powerful task management, calendar, agenda, publishing system, and code documentation tool all-in-one that really extends the power of Emacs. I use Org Mode for the following:

- Organizing my tasks and projects similar to [[https://gettingthingsdone.com/][David Allen's "Getting Things Done"]] method
- Publishing \LaTeX{} documents quicker and more easily
- Coding using [[https://en.wikipedia.org/wiki/Literate_programming#:~:text=Literate%20programming%20is%20a%20programming%20paradigm%20introduced%20by,which%20compilable%20source%20code%20can%20be%20generated.%20][literate programming]].
  
#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package org
    :straight (:type built-in)
    :defer t
    :init
    (whicher "pdflatex")
    (whicher "biber")
    :bind
    ("C-c l" . #'org-store-link)
    ("C-c a" . #'org-agenda)
    ("C-c c" . #'org-capture)
    :custom
    <<org_customize>>
    :config
    (add-hook 'org-mode-hook #'turn-on-flyspell)
    <<org_config>>
    <<babel_languages>>)

  (use-package org-contrib
    :straight t
    :defer t
    :config
    <<org_contrib_config>>)
#+end_src

** Directories

Set up the default directories for Org Mode.

*** Default Directory

Tell org-mode which directory is the default directory for all org-mode files.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-directory "~/Drive/gtd")
#+end_src

*** Location of Agenda Files

Tell org-mode in which directory all the agenda files can be found.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-agenda-start-on-weekday nil)
  (org-agenda-files `("~/Drive/gtd"))
#+end_src

** Filing Notes

*** Default Notes File

I prefer to have all of my captured notes automatically filed into a file called ~inbox.org~. Changing ~org-default-notes-file~ can create this functionality.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-default-notes-file (concat org-directory "/inbox.org"))
#+end_src

*** Refile Targets

**** Set Org Files for Refiling

In order to refile/move tasks from the inbox to other agenda files and subtrees, the following must be set:

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+end_src

**** Allow Refile as Top-level Heading

I want to allow for refiling org-mode tasks at the top of a file. Setting this will also require turning off completing the path in steps if ivy-mode autocompletion is used.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-refile-use-outline-path 'file)
  (org-outline-path-complete-in-steps nil)
#+end_src
 
Setting this variable allows for refiling tasks under a new heading on the fly.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src

** Exporting

To remove headers labeled with the ~:ignore:~ tag, the following code needs to be implemented:

#+begin_src emacs-lisp :noweb-ref org_contrib_config
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src

So that exporting Org Mode buffers doesn't lock up Emacs, the option ~org-export-in-background~ can be set to a non-nil value.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-export-in-background t)
#+end_src

** Task Management Customization

*** Drawer for State Changes

Put changes of TODO states for org-mode into a drawer under each heading so that it does not conflict with content under the headings.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-log-into-drawer t)
#+end_src

*** Custom TODO Keywords

Set up the sequence of org-todo task keywords to allow for delegated (WAITING) tasks and CANCELED tasks.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-todo-keywords
   '((sequence "TODO(t)"
               "WAITING(w)"
               "|" "DONE(d)"
               "CANCELED(c)")))
#+end_src

*** Project Tags

I like to mark projects with a tag, however, I do not want my tasks to inherit these tags because I only use the project tags to locate upper-level headings. In addition, almost all of my org-mode tasks fall under some sort of project headline so it becomes meaningless if all of my tasks have the project tag. Changing this setting prevents the tag from being inherited and showing up in the agenda view.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-tags-exclude-from-inheritance '("project"))
#+end_src

*** Stuck Projects

Stuck projects are projects which are going nowhere and need to be analyzed for next steps. Org-mode allows for custom definitions of what a "stuck project" can be so I define a stuck project as any headline with the project keyword which has no TODO item below it. Org-mode by default assumes all level 2 headings are projects which is not the case in my setup.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-stuck-projects
   '("+project/-MAYBE-DONE"
     ("NEXT" "TODO")
     nil
     "\\<IGNORE\\>"))
#+end_src

** BibLaTeX in Org-mode

I prefer BibLaTeX over the standard BibTeX as it has more powerful features and supports more citation styles. In order to get BibLaTeX to operate in org-mode, the ~org-latex-pdf-process~ variable needs to be changed to reflect this.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-latex-pdf-process
   '("pdflatex -interaction nonstopmode -output-directory %o %f"
     "biber %b"
     "pdflatex -interaction nonstopmode -output-directory %o %f"
     "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

** Org-babel Languages

In order to use active code in org-mode, you must define which programming languages to load. For any programming language you wish to use, it must be added to the ~org-babel-load-languages~ list.

#+name: babel_languages
#+begin_src emacs-lisp
  (with-eval-after-load "org"
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml)))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((awk . t)
     (calc . t)
     (css . t)
     (emacs-lisp . t)
     (eshell . t)
     (gnuplot . t)
     (dot . t)
     (latex . t)
     (ledger . t)
     (octave . t)
     (plantuml . t)
     (R . t)
     (scheme . t)
     (sed . t)
     (shell . t)))
#+end_src

** Appearance

This section contains modifications to how Org Mode appears in buffers.

*** Hide Emphasis Characters

Hiding emphasis characters  in Org Mode makes the text easier to read when it is being displayed directly in Emacs. This will make *bold*, /italic/, _underlined_, ~code~, and =verbatim= text show up without the *,/, _, ~, and = characters around them. 

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-hide-emphasis-markers t)
#+end_src

*** Word Wrapping

Turning on ~visual-line-mode~ allows the text to flow in Org Mode as if working in a word processors.

#+begin_src emacs-lisp :noweb-ref org_config
  (add-hook 'org-mode-hook 'visual-line-mode)
#+end_src

*** Single Space Between Headline and Tags

I keep only a single space between the headline because I find it easier to owork with when buffer sizes change or if I am editing with a mobile device. It just seems to make things simpler.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-tags-column 0)
#+end_src

*** Use "Clean View"

Start all Emacs org-mode buffers with "clean-view" turned on. This makes it easier to see and read org-mode files as all the extra asterisks in the headings wil be hidden leading to more empty white space and a cleaner look.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-startup-indented t)
#+end_src

*** Native Tabs

This will allow for source code blocks in emacs org-mode to be internally indented as they would normally be in their majors modes.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-src-tab-acts-natively t)
 #+end_src
 
** Change TODO Keyword Colors

Change the color of the org-todo keywords to make it easier to see them on a color screen and distinguish between them.

#+begin_src emacs-lisp :noweb-ref org_customize
  (org-todo-keyword-faces
   '(("TODO" . org-warning)
     ("WAITING" . "yellow")
     ("CANCELED" . (:foreground "blue" :weight bold))
     ("DONE" . org-done)))
#+end_src

** Capturing Ideas

Org-capture templates make creating org-mode notes quicker and easier from any buffer using a standard template for each not type.

#+name: org_capture_templates
#+begin_src emacs-lisp :noweb-ref org_customize
   (org-capture-templates
    '(("p" "Projects item" entry (file "~/Drive/gtdprojects.org")
       "* %? :project:")
      ("s" "Someday/Maybe item" entry (file "~/Drive/gtdsomeday.org")
       "* %?\n%x")
      ("T" "Tickler file item" entry (file "~/Drive/gtdtickler.org")
       "* %?\n%^{Scheduled}t\n%x")
      ("t" "To Do Item" entry (file+headline "~/Drive/gtdinbox.org" "Tasks")
       "* TODO %? %^G\nSCHEDULED: %^{Scheduled}t DEADLINE: %^{Deadline}t\n%x")))
#+end_src

* Org-mind-map :org:

[[https://github.com/the-ted/org-mind-map][Org-mind-map]] turns any ~org-mode~ buffer into a mind map in various output formats.

#+begin_src emacs-lisp :tangle yes
  (use-package org-mind-map
    :straight t
    :after org
    :commands org-mind-map-write
    :init
    (require 'ox-org)
    :custom
    (org-mind-map-engine "dot"))
#+end_src

* Org-roam :org:guix:

[[https://www.orgroam.com/][Org -roam]] adds features to make linking org notes easier and provided a database file to connect all the notes together.

#+begin_src emacs-lisp :tangle yes
  (use-package org-roam
    :defer t
    :after org
    :init
    (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename "~/Drive/org-roam"))
    :config
    (org-roam-setup)
    :custom
    (org-roam-dailies-directory "daily/")
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :target (file+head "${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :target (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))
    :bind
    (("C-c n f" . org-roam-node-find)
     ("C-c n g" . org-roam-graph)
     ("C-c n r" . org-roam-node-random)
     (:map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n o" . org-id-get-create)
            ("C-c n t" . org-roam-tag-add)
            ("C-c n a" . org-roam-alias-add)
            ("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

* Org Modern :org:

Org Modern is a package that prettifies Org Mode buffers.

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package org-modern
    :straight t
    :after org
    :custom
    (org-auto-align-tags nil)
    (org-catch-invisible-edits 'show-and-error)
    (org-special-ctrl-a/e t)
    (org-insert-heading-respect-content t)
    (org-pretty-entities t)
    (org-ellipsis "…")
    (org-agenda-tags-column 0)
    (org-agenda-block-separator ?─)
    (org-modern-horizontal-rule
     "──────────────────────────────────────────────────")
    (org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
       " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄"))
    (org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")
  :config
  <<org_modern_config>>
  (global-org-modern-mode)
  (freemacs/org-header-formatting))
#+end_src

* Org Header Sizes

The following custom function will change the heading sizes in Org Mode to make it easier to see the different heading levels. In addition, this will also increase the size of the document title and make it more prominent. This code is modified and from [[https://github.com/daviwil][@daviwil]] from [[https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-05.org#improving-the-look][this link]].

#+begin_src emacs-lisp :noweb-ref org_modern_config
  (defun freemacs/org-header-formatting ()
    "Change the size of headers and titles in Org Mode buffers."
    (interactive)
    (with-eval-after-load 'org
      (dolist
          (face
           '((org-level-1 . 2.00)
             (org-level-2 . 1.75)
             (org-level-3 . 1.50)
             (org-level-4 . 1.25)
             (org-level-5 . 1.10)
             (org-level-6 . 1.10)
             (org-level-7 . 1.10)
             (org-level-8 . 1.10)
             (org-document-title . 2.25)))
        (set-face-attribute (car face) nil :height (cdr face)))))
#+end_src

* End

Tell Emacs what feature this file provides.

#+begin_src emacs-lisp :tangle yes
  (provide 'freemacs-org)

  ;;; freemacs-org.el ends here
#+end_src
