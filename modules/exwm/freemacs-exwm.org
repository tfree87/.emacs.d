# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title:Emacs Desktop Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2022-07-07 17:21:27 thomas>
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: ../../index.html
#+html_link_up: ../../init.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)
#+html_head: <style>#org-div-home-and-up { text-align: right; padding-right: 10pt; }</style>

#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup



* Emacs Desktop

When there is no window manager running, Emacs can run as a window manger using [[https://github.com/ch11ng/exwm][EXWM]]. This makes for a very lean desktop environment where all programs-including X11 applications-are run in Emacs windows and can be controlled by commands that control Emacs windows. Emacs Desktop also adds some extra convenience features.

** Check for Window Manager

I generally only want to use [[https://github.com/ch11ng/exwm][EXWM]] when I do not have another window manger in place. The following check will use ~wmctrl -m~ to check if there is an active window manager running. If it finds a window manager running, the exit code will be 0. If not, the exit code will be 1. Calling ~echo $?~ immediately afterward with ~shell-command-to-string~ will return the exit code appended to the end of the output from ~wmctrl -m~. As we only care about the status of the exit code, we can call on the ~substring~ function to get just the exit code and not the whole output of the command.

There is also a check for the X window system as calling GUI programs from [[https://github.com/ch11ng/exwm][EXWM]] will not work without it.

#+begin_src emacs-lisp :noweb-ref win_man_check
  (and (window-system)
       (not
        (string=
         (substring
          (shell-command-to-string
           (whicher "wmctrl -m ; echo $status"))
          -2 -1) "0")))
#+end_src

** App Launcher

Use App Launcher to launch Linux applications in [[https://github.com/ch11ng/exwm][EXWM]]. App Launcher will scan for all ~*.desktop~ files in the application directories on Linux and provide a list of candidates that can be filtered with completion.

#+begin_src emacs-lisp :tangle yes
  (use-package app-launcher
    :straight '(app-launcher :host github
                             :repo "tfree87/app-launcher"
                             :branch "symlink")
    :commands (app-launcher-run-app))
#+end_src

*** TODO Create a fork of app-launcher and add support for Windows applications using the Windows start menu shortcuts directory

** EXWM :guix:

[[https://github.com/ch11ng/exwm][EXWM]] stands for the "Emacs X11 Window Manager". With this package, Emacs can run X11 programs in windows and frames and controlled with Emacs window commands. To use [[https://github.com/ch11ng/exwm][EXWM]], the [[https://github.com/ch11ng/exwm][EXWM]] package can be pulled from using ~straight.el~.

Currently, I only use EXWM on my GUIX systems to I do not use straight or use-package to manage this package.

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package exwm
    :if
    <<win_man_check>>
    :custom
    <<exwm_custom>>
    :config
    <<exwm_config>>
    (exwm-init))
#+end_src

*** Buffer Naming

To name buffers based on the application that was launched to create them, the following code must be used:

#+begin_src emacs-lisp :noweb-ref exwm_config
  (add-hook
   'exwm-update-class-hook (lambda()
                             (exwm-workspace-rename-buffer
                              exwm-class-name)))
#+end_src

*** Default Workspaces

With only a single monitor at the moment I only see the need for a single workspace as I can switch between tasks by switching buffers. This number should be increased with more monitors, however, as each workspace can display in a separate monitor and switching can then be done easily with the keyboard.

#+begin_src emacs-lisp :noweb-ref exwm_custom
  (exwm-workspace-number 1)
#+end_src

*** Keys

It is extremely helpful to set up special keybindings for use in [[https://github.com/ch11ng/exwm][EXWM]] due to the fact that X11 applications won't see keyboard commands that are first intercepted by Emacs.

**** Global Keys

These key bindings will always work, regardless of whether the current buffer is in ~char-mode~ or ~line-mode~. Since these keybindings always work, it is best to use a prefix key such as the ~super~ key.

#+begin_src emacs-lisp :noweb yes :noweb-ref exwm_custom
  (exwm-input-global-keys
   `(<<char_line_switch>>
     <<window_switching>>
     <<launch>>))
#+end_src

***** Launching Programs

The following command can be used to launch programs in EWXM by using the command ~s-e~. This will call the ~app-launcher-run-app~ function from the [[App Launcher]] package.

#+begin_src emacs-lisp :noweb-ref launch
  ([?\s-e] . app-launcher-run-app)
#+end_src

***** Moving

To have a universal command to switch between windows in [[https://github.com/ch11ng/exwm][EXWM]], the super key and the arrow keys can be used to move about the windows directionally. Normally, using the super key in a desktop environment such as Gnome or XFCE would open an application launcher but in EXWM it is free for our use.  

#+begin_src emacs-lisp :noweb-ref window_switching
  ([s-left] . windmove-left)
  ([s-right] . windmove-right)
  ([s-up] . windmove-up)
  ([s-down] . windmove-down)
#+end_src

The following command can also be used to select a workspace if multiple workspaces are created.

#+begin_src emacs-lisp :noweb-ref window_switching
  ([?\s-w] . exwm-workspace-switch)
#+end_src

***** Switching Between ~char-mode~ and ~line-mode~

When using [[https://github.com/ch11ng/exwm][EXWM]], opening an X11 application will load in ~line-mode~ by default. This means that switching to a buffer containing an X11 application such (e.g. Firefox), that ~C-c~ will act as an Emacs prefix command. Pressing ~C-c C-k~ will switch to ~char-mode~ and ~C-c~ will then do the usual copy command. Pressing ~s-r~ retruns back to ~line-mode~.

#+begin_src emacs-lisp :noweb yes :noweb-ref char_line_switch
  ([?\s-r] . exwm-reset)
#+end_src

**** ~input-send-next-key~

Any keys that Emacs recognizes as a prefix key, will not be passed to any underlying X11 applications running in an Emacs window. If a specific key (i.e. ~C-c~ for copy) needs to be sent to the X11 application, a prefix key can be set as ~exwm-input-send-next-key~ and issued before calling the key.

For example, to copy and paste from an X11 application running in an Emacs window, one could press ~C-q C-c~ to copy text and ~C-q C-v~ to paste text.

#+begin_src emacs-lisp :noweb-ref exwm_config
(define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
#+end_src

**** Input Prefix

Setting ~exwm-input-prefix-keys~ will cause those keys to be passed directly to Emacs to be processed. These keys will not be passed to any app unless they are proceeded by the ~exwm-input-send-next-key~.

#+begin_src emacs-lisp :noweb-ref exwm_custom
  (exwm-input-prefix-keys
   '(?\C-x
     ?\C-u
     ?\C-h
     ?\M-x
     ?\M-`
     ?\M-&
     ?\M-:
     ?\C-\M-j
     ?\C-\ ))
#+end_src

*** RandR

For multi-screen displays, ~exwm-randr~ must be enabled.

#+begin_src emacs-lisp :noweb-ref exwm_config
  (require 'exwm-randr)
  (exwm-randr-enable)
#+end_src

*** SystemTray

Make sure to turn on the system tray in [[https://github.com/ch11ng/exwm][EXWM]] so that there is access to tray icons.

#+begin_src emacs-lisp :noweb-ref exwm_config
  (require 'exwm-systemtray)
  (exwm-systemtray-enable)
#+end_src

*** EXWM Startup Programs

To make EXWM a fully functioning desktop evironment, a few startup programs will need to be run to make it able to function as a replacement to modern desktop environments such as Gnome:

1. To enable a wifi applet in the ~exwm-system-tray~ for easily controlling the wifi, Emacs can execute the ~nm-applet~ if it is installed.

   #+begin_src emacs-lisp :noweb-ref exwm_config
  (whicher "nm-applet")
  (when (executable-find "nm-applet")
    (start-process-shell-command "nm-applet" nil "nm-applet"))
#+end_src

2. To get sound in [[https://github.com/ch11ng/exwm][EXWM]], pulseaudio needs to be running. Killing pulseaudio and restarting seems to be the most effective at ensuring audio in [[https://github.com/ch11ng/exwm][EXWM]] if there are multiple desktop enviroments installed on the system.

   #+begin_src emacs-lisp :noweb-ref de_config
     (shell-command "pulseaudio --kill ; pulseaudio --start")
   #+end_src

3. Use ~pasystray~ for controlling volume graphically in [[https://github.com/ch11ng/exwm][EXWM]].

   #+begin_src emacs-lisp :noweb-ref exwm_config
  (whicher "pasystray")
  (when (executable-find "pasystray")
    (start-process-shell-command "pasystray" nil "pasystray"))
#+end_src

4. If the numpad is to be used for numbers, ~numlockx~ must be installed and turned on.

   #+begin_src emacs-lisp :noweb-ref de_config
     (shell-command "numlockx on")
   #+end_src

5. If the system is a laptop, tunring on tap to click can be activated.

   #+begin_src emacs-lisp :noweb-ref de_config
     (shell-command "xinput set-prop \"SynPS/2 Synaptics TouchPad\" \"libinput Tapping Enabled\" 1")
   #+end_src

6. Lastly, ~xsettingsd~ can be used to set the theme, and other settings for GTK+ applications.

   #+begin_src emacs-lisp :noweb-ref exwm_config
  (whicher "xsettingsd")
  (when (executable-find "xsettingsd")
    (start-process-shell-command "xsettingsd" nil "xsettingsd"))
#+end_src
   
** Desktop Environment

The [[https://github.com/DamienCassou/desktop-environment][Desktop Environment]] package makes it so that some of the features that are included in a typical desktop environment system are included in [[https://github.com/ch11ng/exwm][EXWM]]. This includes features such as access to media buttons, a screen locker, and adjustable brightness from the keyboard.

Currently, as I only use the Emacs Desktop Environment on my GUIX Systems, I do not have it managed by straight or use-package but rather by GUIX.

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package desktop-environment
    :straight nil
    :after exwm
    :init
    (mapc #'whicher '("amixer"
                      "brightnessctl"
                      "numlockx"
                      "scrot"
                      "slock"
                      "upower"
                      "TLP"
                      "playerctl"))
    :config
    (desktop-environment-mode)
    <<de_config>>)
#+end_src

Instead of using ~scrot~ for screenshots, I prefer to use Flameshot.

#+begin_src emacs-lisp :noweb-ref de_config
  (when (executable-find "flameshot")
    (start-process-shell-command "flameshot" nil "flameshot"))
#+end_src

* End

#+begin_src emacs-lisp :tangle yes
  (provide 'freemacs-exwm)

  ;;; freemacs-exwm.el ends here
#+end_src
