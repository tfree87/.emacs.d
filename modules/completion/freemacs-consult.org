# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title:  Consult Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2024-12-10 20:01:00 thomas>
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil toc:t
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: ../../index.html
#+html_link_up: ../../init.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)

-----


* Install Consult

[[https://github.com/minad/consult][Consult]] provides a number of highly useful commands. The complete list of commands can be found [[https://github.com/minad/consult#available-commands][here]].
#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package consult
    :straight t
    :bind
    <<consult_bind>>
    :config
    <<consult_config>>)
#+end_src

* Keybindings

Set the keybindings for consult.
#+begin_src emacs-lisp :comments both :noweb-ref consult_bind
  (;; C-c bindings in `mode-specific-map'
   ("C-c M-x" . consult-mode-command)
   ("C-c h" . consult-history)
   ("C-c k" . consult-kmacro)
   ("C-c m" . consult-man)
   ("C-c i" . consult-info)
   ([remap Info-search] . consult-info)
   ;; C-x bindings in `ctl-x-map'
   ("C-x M-:" . consult-complex-command)
   ("C-x b" . consult-buffer)
   ("C-x 4 b" . consult-buffer-other-window)
   ("C-x 5 b" . consult-buffer-other-frame)
   ("C-x t b" . consult-buffer-other-tab)
   ("C-x r b" . consult-bookmark)
   ("C-x p b" . consult-project-buffer)
   ;; Custom M-# bindings for fast register access
   ("M-#" . consult-register-load)
   ("M-'" . consult-register-store)
   ("C-M-#" . consult-register)
   ;; Other custom bindings
   ("M-y" . consult-yank-pop)
   ;; M-g bindings in `goto-map'
   ("M-g e" . consult-compile-error)
   ("M-g f" . consult-flymake)
   ("M-g g" . consult-goto-line)
   ("M-g o" . consult-org-heading)
   ("M-g M-o" . consult-outline)
   ("M-g m" . consult-mark)
   ("M-g k" . consult-global-mark)
   ("M-g i" . consult-imenu)
   ("M-g I" . consult-imenu-multi)
   ;; M-s bindings in `search-map'
   ("M-s d" . consult-find)
   ("M-s c" . consult-locate)
   ("M-s g" . consult-grep)
   ("M-s G" . consult-git-grep)
   ("M-s r" . consult-ripgrep)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)
   ("M-s k" . consult-keep-lines)
   ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ("M-s e" . consult-isearch-history)
   :map isearch-mode-map
   ("M-e" . consult-isearch-history)
   ("M-s e" . consult-isearch-history)
   ("M-s l" . consult-line)
   ("M-s L" . consult-line-multi)
   ;; Minibuffer history
   :map minibuffer-local-map
   ("M-s" . consult-history)
   ("M-r" . consult-history))
#+end_src

* Change Register Preview to Consult

Change the default Emacs ~register-preview-function~ to use consult effectively.
#+begin_src emacs-lisp :noweb-ref emacs_custom
  (register-preview-function #'consult-register-format)
#+end_src

* Consult Notes

With Consult Notes, users can use Consult to search through note directories specified by the ~consult-notes-sources~ list. Consult will then let you search through these notes with completion frameworks and has good integration with Org Roam.
#+begin_src emacs-lisp :tangle yes
  (use-package consult-notes
    :straight (:type git :host github :repo "mclear-tools/consult-notes")
    :after consult
    :custom
    (consult-notes-sources '(("Org"  ?g  "~/org/notes")))
    :commands (consult-notes
               consult-notes-search-all
               consult-notes-org-roam-find-node
               consult-notes-org-roam-find-node-relation)
    :config
    (consult-notes-org-roam-mode))
#+end_src

* Consult YASnippet

If you have a tendency to forget about all of those YASnippet template abbrevs, then Consult YASnippet can be used to search though your YASnippet templates using a completion framework.

#+begin_src emacs-lisp :tangle yes
  (use-package consult-yasnippet
    :straight t
    :after (consult yasnippet)
    :commands (consult-yasnippet))
#+end_src

* Consult Flycheck

Searching through Flycheck errors is very efficient with Consult Flycheck. It will list all of the errors from the current buffer and these can be searched using a completion framework.

#+begin_src emacs-lisp :tangle yes
  (use-package consult-flycheck
    :straight t
    :commands (consult-flycheck)
    :after (consult flycheck))
#+end_src

* Set Root Function for Projects

Use the built-in project function to find the root of any project. Projectile can also be used but I have yet to compare the differences between the two projects to make a decision as to which one to use.

#+begin_src emacs-lisp :noweb-ref consult_config
  (setq consult-project-root-function
        (lambda ()
          (when-let (project (project-current))
            (car (project-roots project)))))
#+end_src

* Set the Narrowing Key

The narrowing key is pressed before a key used to narrow the results returned from consult. An example would be ~< m~ to list bookmarks after calling ~consult-buffer~.

#+begin_src emacs-lisp :noweb-ref consult_config
  (setq consult-narrow-key "<")
#+end_src

* Tweak Register Preview Window

The following line makes the register preview window look better by adding sorting and thin lines to break up the results into easy to view categories.

#+begin_src emacs-lisp :noweb-ref consult_config
  (advice-add #'register-preview
              :override #'consult-register-window)
#+end_src

* Use Consult to Select xref Locations

Use Consult to search through and select xref locations in buffers

#+begin_src emacs-lisp :noweb-ref consult_config
  (setq xref-show-xrefs-function #'consult-xref)
  (setq xref-show-definitions-function #'consult-xref)
#+end_src

* Completion Cycling

Always cycle through completion candidates by pressing the completion key.

#+begin_src emacs-lisp :comments both :noweb-ref emacs_custom
  (completion-cycle-threshold t)
#+end_src

* End

Tell Emacs what package this file provides.

#+begin_src emacs-lisp :tangle yes
  (provide 'freemacs-consult)

  ;;; freemacs-consult.el ends here.
#+end_src



