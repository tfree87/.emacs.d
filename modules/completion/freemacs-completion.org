# -*-eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t);-*-

#+title: Completion Configuration
#+author: Thomas Freeman
#+date: Time-stamp: <2024-11-04 18:26:47 thomas>
#+language: en_US
#+property: header-args :results silent :exports code

#+options: html-link-use-abs-url:nil html-postamble:auto
#+options: html-preamble:t html-scripts:nil html-style:t
#+options: html5-fancy:nil tex:t num:nil toc:t
#+html_doctype: xhtml-strict
#+html_container: div
#+html_content_class: content
#+keywords: Emacs
#+html_link_home: ../../index.html
#+html_link_up: ../../init.html
#+creator: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 27.1 (<a href="https://orgmode.org">Org</a> mode 9.5.2)

-----


This section contains configuration to set up completion tools in Emacs.

* Cape

 [[https://github.com/minad/cape][Cape]] (completion at point extensions) provides some extensions to make autocompletion better and plays well with Corfu.
 
#+name: cape
#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package cape
    :straight t
    :bind (("C-c p p" . completion-at-point)
           ("C-c p t" . complete-tag)
           ("C-c p d" . cape-dabbrev)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-elisp-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex))
    :init
    <<capfs>>)
#+end_src

*** Cape Completion Functions

Cape provides a number of ~completion-at-point~ functions that can be used. Below are the functions that I use that have not been intrusive.

The following will complete file names in buffers:

#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-file)
#+end_src

This will complete items in TeX and LaTeX modes:

#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-tex)
#+end_src

Search other buffers for completion candidates:

#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
#+end_src

Complete keywords in programming modes:

#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-keyword)
#+end_src

Complete Emacs-lisp symbols:

#+begin_src emacs-lisp :noweb-ref capfs
  (add-to-list 'completion-at-point-functions #'cape-elisp-symbol)
#+end_src

* Embark

[[https://github.com/oantolin/embark][Embark]] provides the ability to execute commands on completion options found in the minibuffer.

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package embark
    :straight t
    :bind
    (("C-." . embark-act)
     ("C-;" . embark-dwim)
     ("C-h B" . embark-bindings))
    :init
    (setq prefix-help-command #'embark-prefix-help-command)
    :config
    <<embark_config>>
    (define-key embark-file-map (kbd "S") 'sudo-find-file))
#+end_src

** Embark Mode Line

Hide the mode line of the Embark live/completions buffers.

#+begin_src emacs-lisp :noweb-ref embark_config
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
#+end_src

** Embark Integration with Consult

Allow use of Embark commands after issuing a Consult command.

#+begin_src emacs-lisp :tangle yes
  (use-package embark-consult
    :straight t
    :after (embark consult)
    :demand t
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

* Orderless

[[https://github.com/oantolin/orderless][Orderless]] will allow for seaching in the minibuffer using text broken up by spaces in which the order does not matter. For instance, if ~M-x~ is entered the search results will be the same if searching for a function by using the search key ~find file~ or ~file find~. Both entries will return the function ~find-file~ as the top result.

#+begin_src emacs-lisp :tangle yes
  (use-package orderless
    :straight t
    :defer 3
    :custom
    (completion-styles '(orderless))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

* Marginalia

[[https://github.com/minad/marginalia][Marginalia]] generates annotations to items in the minibuffer similar to what is accomplished  with [[https://github.com/Yevgnen/ivy-rich][ivy-rich]].

#+begin_src emacs-lisp :tangle yes :noweb yes
  (use-package marginalia
    :straight t
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :hook
    <<marginalia_hooks>>
    :init
    (marginalia-mode))
#+end_src

If All the Icons and All the Icons Completion is installed, activate All the Completion to work with Marginalia.

#+begin_src emacs-lisp :noweb-ref marginalia_hooks
  (marginalia-mode . all-the-icons-completion-marginalia-setup)
#+end_src

* Vertico

[[https://github.com/minad/vertico][Vertico]] removes the ~*Completions*~ buffer and instead, populates a vertical list of completion options in the minibuffer region. This is similar to other completion tools in Emacs such Helm, Ivy, Selectrum, and icomplete-vertical.

#+begin_src emacs-lisp :tangle yes
  (use-package vertico
    :straight t
    :demand t
    :custom
    (vertico-cycle t)
    (vertico-resize t)
    :init
    (vertico-mode))
#+end_src

* End

Tell Emacs what feature this file provides.

#+begin_src emacs-lisp :tangle yes
  (provide 'freemacs-completion)
#+end_src
